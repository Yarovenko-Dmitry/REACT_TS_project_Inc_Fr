{"version":3,"sources":["serviceWorker.ts","common/NavbarButton.tsx","components/Navbar/Navbar.tsx","api/api.ts","redux/login-reducer.ts","components/auth/Login/LoginPage.tsx","redux/register-reducer.ts","components/auth/Register/RegisterContainer.tsx","redux/passwordRecovery-reducer.ts","common/InputField.tsx","common/FormBtn.tsx","common/FormWrapper.tsx","components/auth/PasswordRecovery/PasswordRecovery.tsx","redux/pssawordCreation-reducer.ts","components/auth/PasswordCreation/PasswordCreation.tsx","components/Profile/Profile.tsx","App.tsx","redux/app-reducer.ts","redux/redux-store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","useStyles","makeStyles","theme","createStyles","btn","margin","spacing","color","borderColor","textDecoration","NavbarButton","link","name","classes","to","style","Button","variant","className","size","marginAutoItem","navbar","backgroundColor","Navbar","AppBar","position","Toolbar","Typography","Box","instance","axios","create","withCredentials","baseURL","passwordRecovery","email","post","from","message","password","resetPasswordToken","authAPI","rememberMe","delete","data","internalState","isAuth","userProfile","_id","avatar","publicCardPacksCount","created","updated","isAdmin","verified","error","loginAC","type","loginReducer","state","action","LoginPage","useSelector","login","LoginForm","dispatch","useDispatch","formik","useFormik","initialValues","onSubmit","values","then","res","setLoginTC","console","log","JSON","stringify","handleSubmit","htmlFor","id","onChange","handleChange","value","isRegistered","RegisterContainer","register","validate","a","Grid","container","justify","item","xs","FormControl","FormLabel","FormGroup","TextField","label","getFieldProps","errors","success","loading","setErrorAC","setSuccessAC","setLoadingAC","passwordRecoveryReducer","ValidationTextField","withStyles","root","borderWidth","borderLeftWidth","padding","input","marginBottom","InputField","helperText","fullWidth","required","submit","FormButton","disable","disabled","paper","marginTop","display","flexDirection","alignItems","form","width","FormWrapper","onsubmit","children","title","Container","component","maxWidth","CssBaseline","Avatar","PasswordRecovery","validateOnBlur","validateOnChange","test","catch","response","errorObject","request","recoverPasswordTC","trim","pwRecoveryRequest","pssawordCreationReducer","PasswordCreation","validationSchema","Yup","shape","changepassword","when","is","val","length","oneOf","token","useParams","status","setNewPasswordTC","passwordUpdate","confirm","Profile","s","profileBlock","profileHeader","onClick","info","App","path","render","initialState","isInitialized","reducers","combineReducers","app","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.77e41adc.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport {Button, createStyles, Theme} from '@material-ui/core';\r\nimport {NavLink} from 'react-router-dom';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\n\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n\tcreateStyles({\r\n\t\tbtn: {\r\n\t\t\tmargin: theme.spacing(1),\r\n\t\t\tcolor: '#e4b61a',\r\n\t\t\tborderColor: '#e4b61a',\r\n\t\t\ttextDecoration:'none'\r\n\t\t},\r\n\t}),\r\n);\r\n\r\ntype PropsType = {\r\n\tlink: string,\r\n\tname: string\r\n}\r\n\r\nconst NavbarButton = ({link,name}:PropsType) => {\r\n\r\n\tconst classes = useStyles();\r\n\r\n\treturn (\r\n\t\t<NavLink to={link} style={{textDecoration: 'none'}}>\r\n\t\t\t<Button variant='outlined' className={classes.btn}\r\n\t\t\t        size={'small'}>{name}</Button>\r\n\t\t</NavLink>\r\n\t);\r\n};\r\n\r\nexport default NavbarButton;\r\n","import React from 'react';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport {\r\n\tAppBar,\r\n\tBox,\r\n\tcreateStyles,\r\n\tTheme,\r\n\tToolbar,\r\n\tTypography\r\n} from '@material-ui/core';\r\nimport NavbarButton from '../../common/NavbarButton';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n\tcreateStyles({\r\n\t\tmarginAutoItem: {\r\n\t\t\tmargin: 'auto'\r\n\t\t},\r\n\t\tnavbar: {\r\n\t\t\tbackgroundColor: '#2c3258'\r\n\t\t},\r\n\t\tbtn: {\r\n\t\t\tmargin: theme.spacing(1),\r\n\t\t\tcolor: '#e4b61a',\r\n\t\t\tborderColor: '#e4b61a',\r\n\t\t\ttextDecoration:'none'\r\n\t\t},\r\n\t}),\r\n);\r\n\r\nconst Navbar = () => {\r\n\tconst classes = useStyles();\r\n\r\n\treturn (\r\n\t\t<AppBar position=\"static\" className={classes.navbar}>\r\n\t\t\t<Toolbar>\r\n\t\t\t\t<Typography variant=\"h6\">\r\n\t\t\t\t\tCards\r\n\t\t\t\t</Typography>\r\n\t\t\t\t<Box className={classes.marginAutoItem}>\r\n\t\t\t\t\t<NavbarButton link={'/profile'} name={'Profile'}/>\r\n\t\t\t\t\t<NavbarButton link={'/login'} name={'login'}/>\r\n\t\t\t\t\t<NavbarButton link={'/register'} name={'register'}/>\r\n\t\t\t\t\t<NavbarButton link={'/passwordRecovery'} name={'Recovery'}/>\r\n\t\t\t\t\t<NavbarButton link={'/set-new-password'} name={'New password'}/>\r\n\t\t\t\t</Box>\r\n\t\t\t</Toolbar>\r\n\t\t</AppBar>\r\n\r\n\t);\r\n};\r\nexport default Navbar;\r\n\r\n","import axios from 'axios';\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'https://neko-back.herokuapp.com/2.0',\r\n});\r\n\r\nexport const passwordRecovery = {\r\n    getToken(email: string) {\r\n        let promise = instance.post(`/auth/forgot/`, {\r\n            email,\r\n            from: 'password-reset-server <noreply@noreply.it>',\r\n            message: `\r\n\t\t\t\t\t<div style=\"background-color: lime; padding: 15px\">\r\n\t\t\t\t\tpassword recovery link: \r\n\t\t\t\t\t<a href='http://localhost:3000/#/set-new-password/$token$'>link</a>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t`\r\n        });\r\n        return promise;\r\n    },\r\n    newPassword(password: string, resetPasswordToken: string) {\r\n        return instance.post(`/auth/set-new-password`, {password, resetPasswordToken})\r\n    }\r\n};\r\n\r\nexport const authAPI = {\r\n    me() {\r\n        return instance.post<UsersDataType>(`auth/me`).then((res) => {\r\n            return res.data\r\n        })\r\n    },\r\n    login(email: string, password: string, rememberMe = false) {\r\n        return instance.post(`auth/login`, {email, password, rememberMe});\r\n    },\r\n    logout() {\r\n        return instance.delete(`auth/me`);\r\n    },\r\n    register(data: RegisterDataType) {\r\n\r\n        return instance.post(`/auth/register`, {...data});\r\n    }\r\n}\r\n\r\ntype RegisterDataType = {\r\n    email: string,\r\n    password: string\r\n}\r\nexport type UsersDataType = {\r\n    _id: string;\r\n    email: string;\r\n    name: string;\r\n    avatar?: string;\r\n    publicCardPacksCount: number; // количество колод\r\n\r\n    created: any;\r\n    updated: any;\r\n    isAdmin: boolean;\r\n    verified: boolean; // подтвердил ли почту\r\n    rememberMe: boolean;\r\n\r\n    error: string;\r\n}","import {Dispatch} from 'redux';\r\nimport {authAPI, UsersDataType} from '../api/api';\r\nimport {AppRootStateType} from './redux-store';\r\nimport { ThunkDispatch } from 'redux-thunk';\r\n\r\nexport type LoginReducerType = {\r\n  isAuth?: boolean,\r\n  userProfile: UsersDataType\r\n};\r\n\r\nlet internalState: LoginReducerType = {\r\n  isAuth: false,\r\n  userProfile: {\r\n    _id: '',\r\n    email: '',\r\n    name: '',\r\n    avatar: '',\r\n    publicCardPacksCount: 0,\r\n    created: 'YYYY-MM-DD',\r\n    updated: 'YYYY-MM-DD',\r\n    isAdmin: false,\r\n    verified: false,\r\n    rememberMe: false,\r\n    error: '',\r\n  }\r\n};\r\n\r\nconst loginReducer = (state: LoginReducerType = internalState, action: ActionTypes): LoginReducerType => {\r\n\r\n  switch (action.type) {\r\n    case 'login/SET_USER_DATA':\r\n      return {\r\n        ...state,\r\n        userProfile: action.data,\r\n        isAuth: true\r\n      };\r\n    case 'login/LOGOUT':\r\n      return {\r\n        ...state,\r\n        isAuth: false\r\n      };\r\n    // Андрея - не трогать\r\n    case 'login/AUTH-ME':\r\n      return {...state, isAuth: action.isAuth, userProfile: action.userProfile};\r\n// Андрея - не трогать\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nconst loginAC = (data: UsersDataType) => ({\r\n  type: 'login/SET_USER_DATA',\r\n  data\r\n} as const);\r\n\r\nconst logoutAC = () => ({\r\n  type: 'login/LOGOUT',\r\n} as const);\r\n\r\ntype ActionTypes =\r\n  | ReturnType<typeof loginAC>\r\n  | ReturnType<typeof logoutAC>\r\n  // Андрея - не трогать\r\n  | ReturnType<typeof authMeAC>\r\n// Андрея - не трогать\r\n\r\nexport const setLoginTC = (email: string, password: string, rememberMe: boolean = false) => (dispatch: Dispatch<ActionTypes>) => {\r\n  authAPI.login(email, password, rememberMe)\r\n    .then(res => {\r\n        dispatch(loginAC(res.data))\r\n      }\r\n    )\r\n};\r\n\r\nexport const logoutTC = () => (dispatch: Dispatch) => {\r\n  authAPI.logout()\r\n    .then(res => {\r\n      if (res.data.info === 'logOut success —ฅ/ᐠ.̫ .ᐟ\\\\ฅ—') {\r\n        dispatch(logoutAC())\r\n      }\r\n    })\r\n}\r\n\r\n// Андрея - не трогать\r\nexport const authMeAC = (isAuth: boolean, userProfile: UsersDataType) => ({\r\n  type: 'login/AUTH-ME',\r\n  isAuth,\r\n  userProfile\r\n} as const);\r\n\r\nexport const authMeTC = () => async (dispatch: ThunkDispatch<AppRootStateType, {}, ActionTypes>) => {\r\n  try {\r\n    const res = await authAPI.me();\r\n    dispatch(authMeAC(true, res));\r\n  } catch (e) {\r\n    console.log(e.response.data.error)\r\n  }\r\n}\r\n// Андрея - не трогать\r\n\r\n\r\nexport default loginReducer","import React from 'react';\r\nimport {useFormik} from 'formik';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {setLoginTC} from '../../../redux/login-reducer';\r\nimport {AppRootStateType} from '../../../redux/redux-store';\r\nimport {Redirect} from 'react-router-dom';\r\n\r\n\r\nexport const LoginPage = () => {\r\n\r\n  const isAuth = useSelector<AppRootStateType, boolean | undefined>(state => state.login.isAuth)\r\n\r\n  if (isAuth) {\r\n    return <Redirect to={'/profile'}/>\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      LoginPage\r\n      <LoginForm/>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst LoginForm = () => {\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const formik: any = useFormik({\r\n    initialValues: {\r\n      email: '',\r\n      password: '',\r\n      rememberMe: false\r\n    },\r\n    onSubmit: values => {\r\n\r\n      const {email, password, rememberMe} = values\r\n      dispatch(setLoginTC(email, password, rememberMe))\r\n      console.log(JSON.stringify(values, null, 2));\r\n    },\r\n  });\r\n\r\n  return (\r\n    <>\r\n      <form onSubmit={formik.handleSubmit}>\r\n        <label htmlFor=\"email\">Email Address</label>\r\n        <input\r\n          id=\"email\"\r\n          name=\"email\"\r\n          type=\"email\"\r\n          onChange={formik.handleChange}\r\n          value={formik.values.email}\r\n        />\r\n        <label htmlFor=\"password\">password</label>\r\n        <input\r\n          id=\"password\"\r\n          name=\"password\"\r\n          type=\"password\"\r\n          onChange={formik.handleChange}\r\n          value={formik.values.password}\r\n        />\r\n        <label htmlFor=\"rememberMe\">772316772316 rememberMe</label>\r\n        <input\r\n          id=\"rememberMe\"\r\n          name=\"rememberMe\"\r\n          type=\"checkbox\"\r\n          onChange={formik.handleChange}\r\n          value={formik.values.rememberMe}        />\r\n        <button type=\"submit\">Log in</button>\r\n      </form>\r\n\r\n    </>\r\n  );\r\n};","import {Dispatch} from \"redux\";\r\nimport {authAPI} from \"../api/api\";\r\n\r\n\r\nlet internalState: RegisterReducerType = {\r\n    isRegistered: false\r\n};\r\n\r\nexport const registerReducer = (state: RegisterReducerType = internalState, action: ActionsType) => {\r\n\r\n    switch (action.type) {\r\n        case \"register/SET-IS-REGISTERED\":\r\n            return {...state, isRegistered: action.value}\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst setRegisterAC = (value: boolean) => ({\r\n    type: 'register/SET-IS-REGISTERED', value\r\n})\r\n\r\nexport const RegisterTC = (data: RegisterParamsType) => async (dispatch: Dispatch<ActionsType>) => {\r\n    debugger\r\n    try {\r\n        let response = await authAPI.register(data)\r\n            dispatch(setRegisterAC(true))\r\n    } catch (e) {\r\n        console.log(e)\r\n    }\r\n\r\n}\r\n\r\n//types\r\ntype RegisterReducerType = {\r\n    isRegistered: boolean\r\n};\r\ntype ActionsType = ReturnType<typeof setRegisterAC>\r\ntype ThunkDispatch = Dispatch<ActionsType>\r\n\r\ntype RegisterParamsType = {\r\n    email: string\r\n    password: string\r\n}","import React from 'react';\r\nimport {useFormik} from \"formik\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {Button, FormControl, FormGroup, FormLabel, Grid, TextField} from \"@material-ui/core\";\r\nimport {Redirect} from 'react-router-dom';\r\nimport {RegisterTC} from \"../../../redux/register-reducer\";\r\nimport {AppRootStateType} from \"../../../redux/redux-store\";\r\n\r\nexport const RegisterContainer = () => {\r\n    const dispatch = useDispatch()\r\n    const isRegistered = useSelector<AppRootStateType, boolean>(state => state.register.isRegistered)\r\n    const formik = useFormik({\r\n        validate: (values: any) => {\r\n            if (!values.email) {\r\n                return {\r\n                    email: 'Email is required'\r\n                }\r\n            }\r\n            if (!values.password) {\r\n                return {\r\n                    password: 'Password is required'\r\n                }\r\n            }\r\n        },\r\n        initialValues: {\r\n            email: '',\r\n            password: ''\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(RegisterTC(values))\r\n        }\r\n    })\r\n\r\n    if (isRegistered) {\r\n        return <Redirect to={'/login'}/>\r\n    }\r\n\r\n    return (\r\n        <Grid container justify=\"center\">\r\n            <Grid item xs={4}>\r\n                <form onSubmit={formik.handleSubmit}>\r\n                    <FormControl>\r\n                        <FormLabel>\r\n                            <p>\r\n                                Registration\r\n                            </p>\r\n                        </FormLabel>\r\n                        <FormGroup>\r\n                            <TextField\r\n                                label=\"Email\"\r\n                                margin=\"normal\"\r\n                                {...formik.getFieldProps('email')}\r\n                            />\r\n                            {formik.errors.email ? <div>{formik.errors.email}</div> : null}\r\n                            <TextField\r\n                                type=\"password\"\r\n                                label=\"Password\"\r\n                                margin=\"normal\"\r\n                                {...formik.getFieldProps('password')}\r\n                            />\r\n                            {formik.errors.password ? <div>{formik.errors.email}</div> : null}\r\n                            <Button type={'submit'} variant={'contained'} color={'primary'}>Register</Button>\r\n                        </FormGroup>\r\n                    </FormControl>\r\n                </form>\r\n            </Grid>\r\n        </Grid>\r\n    )\r\n}\r\n\r\n","import {passwordRecovery} from '../api/api';\r\nimport {Dispatch} from 'redux';\r\n\r\nexport type PasswordRecoveryReducerType = {\r\n\terror: string\r\n\tsuccess: boolean\r\n\tloading: boolean\r\n};\r\n\r\nlet internalState: PasswordRecoveryReducerType = {\r\n\terror: '',\r\n\tsuccess: false,\r\n\tloading: false\r\n};\r\n\r\nconst passwordRecoveryReducer = (state: PasswordRecoveryReducerType = internalState,\r\n\taction: ActionTypes) => {\r\n\tswitch (action.type) {\r\n\t\tcase 'pwRecovery/SET_ERROR':\r\n\t\t\treturn {\r\n\t\t\t\t...state, error: action.error\r\n\t\t\t};\r\n\t\tcase 'pwRecovery/SET_SUCCESS':\r\n\t\t\treturn {\r\n\t\t\t\t...state, success: action.success\r\n\t\t\t};\r\n\t\tcase 'pwRecovery/SET_LOADING':\r\n\t\t\treturn {\r\n\t\t\t\t...state, loading: action.loading\r\n\t\t\t};\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n};\r\n\r\nexport const setErrorAC = (error: string) => ({\r\n\ttype: 'pwRecovery/SET_ERROR',\r\n\terror\r\n} as const);\r\n\r\nexport const setSuccessAC = (success: boolean) => ({\r\n\ttype: 'pwRecovery/SET_SUCCESS',\r\n\tsuccess\r\n} as const);\r\nexport const setLoadingAC = (loading: boolean) => ({\r\n\ttype: 'pwRecovery/SET_LOADING',\r\n\tloading\r\n} as const);\r\n\r\ntype ActionTypes = ReturnType<typeof setErrorAC> | ReturnType<typeof setSuccessAC> | ReturnType<typeof setLoadingAC>\r\n\r\nexport const recoverPasswordTC = (email: string) => (dispatch: Dispatch<ActionTypes>) => {\r\n\tdispatch(setLoadingAC(true))\r\n\tpasswordRecovery.getToken(email).then(\r\n\t\tres => {\r\n\t\t\tdispatch(setSuccessAC(res.data.success));\r\n\t\t\tdispatch(setErrorAC(''));\r\n\t\t\tdispatch(setLoadingAC(false))\r\n\t\t}\r\n\t).catch(error => {\r\n\t\tconst {response} = error;\r\n\t\tconst {request, ...errorObject} = response;\r\n\t\tdispatch(setSuccessAC(false));\r\n\t\tdispatch(setLoadingAC(false))\r\n\t\treturn dispatch(setErrorAC(errorObject.data.error));\r\n\t});\r\n};\r\n\r\nexport default passwordRecoveryReducer;","import React from 'react';\r\nimport {makeStyles, withStyles} from '@material-ui/core/styles';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\nconst ValidationTextField = withStyles({\r\n\troot: {\r\n\t\t'& input:valid + fieldset': {\r\n\t\t\tborderColor: 'green',\r\n\t\t\tborderWidth: 2,\r\n\t\t},\r\n\t\t'& input:valid:focus + fieldset': {\r\n\t\t\tborderLeftWidth: 6,\r\n\t\t\tpadding: '4px !important',\r\n\t\t},\r\n\t},\r\n})(TextField);\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n\tinput: {\r\n\t\tmarginBottom: '10px'\r\n\t}\r\n}));\r\n\r\n\r\ntype PropsType = {\r\n\terror: boolean | string\r\n\tformik: any\r\n\ttype: string\r\n\tlabel : string\r\n}\r\n\r\nconst InputField = ({error = false,formik, type, label}: PropsType) => {\r\n\r\n\tconst classes = useStyles();\r\n\r\n\treturn (\r\n\t\t<ValidationTextField className={classes.input}\r\n\t\t                     error={error}\r\n\t\t                     helperText={error}\r\n\t\t                     label={label}\r\n\t\t                     fullWidth\r\n\t\t                     required\r\n\t\t                     variant=\"outlined\"\r\n\t\t                     type={type}\r\n\t\t                     {...formik}\r\n\r\n\t\t/>\r\n\t);\r\n};\r\n\r\nexport default InputField;\r\n","import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n\tsubmit: {\r\n\t\tmargin: theme.spacing(3, 0, 2),\r\n\t\tbackgroundColor: '#e4b61a',\r\n\t\t'&:hover': {\r\n\t\t\tbackgroundColor: '#2c3258'\r\n\t\t}\r\n\t},\r\n}));\r\n\r\n\r\ntype PropsType = {\r\n\tdisable: boolean\r\n\tname: string\r\n}\r\n\r\nconst FormButton = ({disable,name}:PropsType) => {\r\n\r\n\tconst classes = useStyles();\r\n\r\n\treturn (\r\n\t\t<Button\r\n\t\t\ttype=\"submit\"\r\n\t\t\tfullWidth\r\n\t\t\tvariant=\"contained\"\r\n\t\t\tcolor=\"primary\"\r\n\t\t\tclassName={classes.submit}\r\n\t\t\tdisabled={disable}\r\n\t\t>\r\n\t\t\t{name}\r\n\t\t</Button>\r\n\t);\r\n};\r\n\r\nexport default FormButton;\r\n","import React from 'react';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport LockOpenIcon from '@material-ui/icons/LockOpen';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Container from '@material-ui/core/Container';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n\tpaper: {\r\n\t\tmarginTop: theme.spacing(8),\r\n\t\tdisplay: 'flex',\r\n\t\tflexDirection: 'column',\r\n\t\talignItems: 'center',\r\n\t},\r\n\tavatar: {\r\n\t\tmargin: theme.spacing(1),\r\n\t\tbackgroundColor: '#2c3258',\r\n\t},\r\n\tform: {\r\n\t\twidth: '100%',\r\n\t\tmarginTop: theme.spacing(3),\r\n\t},\r\n}));\r\n\r\ntype PropsType = {\r\n\tonsubmit: any\r\n\ttitle: string\r\n\tchildren: any\r\n}\r\n\r\nconst FormWrapper = ({onsubmit, children, title}:PropsType) => {\r\n\r\n\tfunction onSubmit() {\r\n\t\tonsubmit()\r\n\t}\r\n\r\n\tconst classes = useStyles();\r\n\r\n\treturn (\r\n\t\t<Container component=\"main\" maxWidth=\"xs\">\r\n\t\t\t<CssBaseline/>\r\n\t\t\t<div className={classes.paper}>\r\n\t\t\t\t<Avatar className={classes.avatar}>\r\n\t\t\t\t\t<LockOpenIcon/>\r\n\t\t\t\t</Avatar>\r\n\t\t\t\t<Typography component=\"h1\" variant=\"h5\">\r\n\t\t\t\t\t{title}\r\n\t\t\t\t</Typography>\r\n\t\t\t\t<form className={classes.form} onSubmit={onSubmit}>\r\n\t\t\t\t\t<Grid container spacing={2}>\r\n\t\t\t\t\t\t<Grid item xs={12}>\r\n\t\t\t\t\t\t\t{children}\r\n\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t</form>\r\n\t\t\t</div>\r\n\t\t</Container>\r\n\t);\r\n};\r\n\r\nexport default FormWrapper;\r\n","import React from 'react';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from '../../../redux/redux-store';\r\nimport {recoverPasswordTC} from '../../../redux/passwordRecovery-reducer';\r\nimport {useFormik} from 'formik';\r\nimport InputField from '../../../common/InputField';\r\nimport FormButton from '../../../common/FormBtn';\r\nimport FormWrapper from '../../../common/FormWrapper';\r\n\r\nexport const PasswordRecovery = () => {\r\n\r\n\tconst dispatch = useDispatch();\r\n\r\n\tconst formik = useFormik({\r\n\t\tvalidateOnBlur: true,\r\n\t\tvalidateOnChange: false,\r\n\t\tvalidate: (values) => {\r\n\t\t\tif (!values.email) {\r\n\t\t\t\treturn {\r\n\t\t\t\t\temail: 'Email is required'\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t\telse if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n\t\t\t\treturn {\r\n\t\t\t\t\temail: 'Invalid email address'\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t},\r\n\t\tinitialValues: {\r\n\t\t\temail: ''\r\n\t\t},\r\n\t\tonSubmit: values => {\r\n\t\t\tconst {email} = values;\r\n\t\t\tdispatch(recoverPasswordTC(email.trim()));\r\n\t\t},\r\n\t});\r\n\r\n\tconst error = useSelector<AppRootStateType, string>(state => state.pwRecoveryRequest.error);\r\n\tconst success = useSelector<AppRootStateType, boolean>(state => state.pwRecoveryRequest.success);\r\n\tconst loading = useSelector<AppRootStateType, boolean>(state => state.pwRecoveryRequest.loading);\r\n\r\n\treturn (\r\n\t\t<FormWrapper onsubmit={formik.handleSubmit} title={'Reset password'}>\r\n\t\t\t{formik.errors.email ? <div>{formik.errors.email}</div> : null}\r\n\t\t\t{error ? <div>{error}</div> : null}\r\n\t\t\t<InputField error={!!formik.errors.email} formik={{...formik.getFieldProps('email')}}\r\n\t\t\t            type={'email'} label={'Enter your email'}/>\r\n\t\t\t<FormButton name={'Send'} disable={loading}/>\r\n\t\t</FormWrapper>\r\n\t);\r\n};\r\n\r\n","import {Dispatch} from 'redux';\r\nimport {passwordRecovery} from '../api/api';\r\n\r\nexport type PssawordCreationReducerType = {\r\n\terror: string\r\n\tsuccess: boolean\r\n\tloading: boolean\r\n};\r\n\r\nlet internalState: PssawordCreationReducerType = {\r\n\terror: '',\r\n\tsuccess: false,\r\n\tloading: false\r\n};\r\n\r\nconst pssawordCreationReducer = (state: PssawordCreationReducerType = internalState,\r\n\taction: ActionTypes) => {\r\n\r\n\tswitch (action.type) {\r\n\t\tcase 'pwCreation/SET_SUCCESS':\r\n\t\t\treturn {\r\n\t\t\t\t...state, success: action.success\r\n\t\t\t};\r\n\t\tcase 'pwCreation/SET_LOADING':\r\n\t\t\treturn {\r\n\t\t\t\t...state, loading: action.loading\r\n\t\t\t};\r\n\t\tcase 'pwCreation/SET_ERROR':\r\n\t\t\treturn {\r\n\t\t\t\t...state, error: action.error\r\n\t\t\t};\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n};\r\n\r\nconst setSuccessAC = (success: boolean) => ({\r\n\ttype: 'pwCreation/SET_SUCCESS',\r\n\tsuccess\r\n} as const);\r\nconst setLoadingAC = (loading: boolean) => ({\r\n\ttype: 'pwCreation/SET_LOADING',\r\n\tloading\r\n} as const);\r\nexport const setErrorAC = (error: string) => ({\r\n\ttype: 'pwCreation/SET_ERROR',\r\n\terror\r\n} as const);\r\n\r\ntype ActionTypes =\r\n\tReturnType<typeof setErrorAC>\r\n\t| ReturnType<typeof setSuccessAC>\r\n\t| ReturnType<typeof setLoadingAC>\r\n\r\nexport const setNewPasswordTC = (password: string,\r\n\ttoken: string) => (dispatch: Dispatch<ActionTypes>) => {\r\n\tdispatch(setLoadingAC(true));\r\n\tpasswordRecovery.newPassword(password, token).then(\r\n\t\tres => {\r\n\t\t\tif (res.status === 200) {\r\n\t\t\t\tdispatch(setSuccessAC(true));\r\n\t\t\t\tdispatch(setErrorAC(''));\r\n\t\t\t\tdispatch(setLoadingAC(false));\r\n\t\t\t}\r\n\t\t}\r\n\t).catch(error => {\r\n\t\tconst {response} = error;\r\n\t\tconst {request, ...errorObject} = response;\r\n\t\tdispatch(setSuccessAC(false));\r\n\t\tdispatch(setLoadingAC(false));\r\n\t\treturn dispatch(setErrorAC(errorObject.data.error));\r\n\t});\r\n};\r\n\r\nexport default pssawordCreationReducer;","import React from 'react';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from '../../../redux/redux-store';\r\nimport * as Yup from 'yup';\r\nimport {useFormik} from 'formik';\r\nimport {setNewPasswordTC} from '../../../redux/pssawordCreation-reducer';\r\nimport {useParams, Redirect} from 'react-router-dom';\r\nimport InputField from '../../../common/InputField';\r\nimport FormButton from '../../../common/FormBtn';\r\nimport FormWrapper from '../../../common/FormWrapper';\r\n\r\nexport const PasswordCreation = () => {\r\n\r\n\tconst validationSchema = Yup.object().shape({\r\n\t\tpassword: Yup.string().required('This field is required'),\r\n\t\tchangepassword: Yup.string().when('password', {\r\n\t\t\tis: val => (val && val.length > 0 ? true : false),\r\n\t\t\tthen: Yup.string().oneOf(\r\n\t\t\t\t[Yup.ref('password')],\r\n\t\t\t\t'Both password need to be the same'\r\n\t\t\t)\r\n\t\t})\r\n\t});\r\n\r\n\tconst {token} = useParams();\r\n\tconst dispatch = useDispatch();\r\n\r\n\tconst formik = useFormik({\r\n\t\tvalidateOnBlur: true,\r\n\t\tvalidateOnChange: false,\r\n\t\tinitialValues: {\r\n\t\t\tpassword: '',\r\n\t\t\tchangepassword: ''\r\n\t\t},\r\n\t\tvalidationSchema,\r\n\t\tonSubmit: values => {\r\n\t\t\tconst {password} = values;\r\n\t\t\tdispatch(setNewPasswordTC(password, token));\r\n\t\t}\r\n\t});\r\n\r\n\tconst error = useSelector<AppRootStateType, string>(state => state.passwordUpdate.error);\r\n\tconst success = useSelector<AppRootStateType, boolean>(state => state.passwordUpdate.success);\r\n\tconst loading = useSelector<AppRootStateType, boolean>(state => state.passwordUpdate.loading);\r\n\r\n\tif (success) {\r\n\t\twindow.confirm('Your password has been changed!');\r\n\t\treturn <Redirect to={'/login'}/>;\r\n\t}\r\n\r\n\treturn (\r\n\t\t<FormWrapper onsubmit={formik.handleSubmit} title={'Set new password'}>\r\n\t\t\t{formik.errors.password ? <div>{formik.errors.password}</div> : null}\r\n\t\t\t{error ? <div>{error}</div> : null}\r\n\t\t\t<InputField error={!!formik.errors.password}\r\n\t\t\t            formik={{...formik.getFieldProps('password')}}\r\n\t\t\t            type={'password'} label={'Enter new password'}/>\r\n\t\t\t{formik.errors.changepassword ? <div>{formik.errors.changepassword}</div> : null}\r\n\t\t\t<InputField error={!!formik.errors.changepassword}\r\n\t\t\t            formik={{...formik.getFieldProps('changepassword')}}\r\n\t\t\t            type={'password'} label={'Confirm new password'}/>\r\n\t\t\t<FormButton name={'Send'} disable={loading}/>\r\n\t\t</FormWrapper>\r\n\r\n\t);\r\n};\r\n\r\n","import React from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../redux/redux-store\";\r\nimport s from \"./Profile.module.css\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {LoginReducerType, logoutTC} from '../../redux/login-reducer';\r\nimport {UsersDataType} from '../../api/api';\r\n\r\nexport const Profile = () => {\r\n\r\n  let internalState: LoginReducerType = {\r\n    isAuth: false,\r\n    userProfile: {\r\n      _id: '',\r\n      email: '',\r\n      name: '',\r\n      avatar: '',\r\n      publicCardPacksCount: 0,\r\n      created: 'YYYY-MM-DD',\r\n      updated: 'YYYY-MM-DD',\r\n      isAdmin: false,\r\n      verified: false,\r\n      rememberMe: false,\r\n      error: '',\r\n    }\r\n  };\r\n\r\n  const isAuth = useSelector<AppRootStateType, boolean | undefined>(state => state.login.isAuth);\r\n  const userProfile = useSelector<AppRootStateType, UsersDataType>(state => state.login.userProfile);\r\n\r\n  const {email, name, avatar, publicCardPacksCount, created} = userProfile;\r\n\r\n  const dispatch = useDispatch()\r\n  if (!isAuth) {\r\n    return <Redirect to={'/login'}/>\r\n  }\r\n\r\n  const logoutHandler = () => {\r\n    dispatch(logoutTC())\r\n  }\r\n\r\n  return (\r\n    <div className={s.profileBlock}>\r\n      <div className={s.profileHeader}>\r\n        <div className={'container'}>\r\n          <div>Profile {name}</div>\r\n          <div>Profile email {email}</div>\r\n          <div>Profile avatar {avatar}</div>\r\n          <div>Profile publicCardPacksCount {publicCardPacksCount}</div>\r\n          <div>Profile created {created}</div>\r\n          <button type=\"submit\" onClick={logoutHandler}>Log out</button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport Navbar from './components/Navbar/Navbar';\r\nimport {Route} from 'react-router-dom';\r\nimport {ProfileContainer} from './components/Profile/ProfileContainer';\r\nimport {LoginPage} from './components/auth/Login/LoginPage';\r\nimport {RegisterContainer} from './components/auth/Register/RegisterContainer';\r\nimport {PasswordRecovery} from './components/auth/PasswordRecovery/PasswordRecovery';\r\nimport {PasswordCreation} from './components/auth/PasswordCreation/PasswordCreation';\r\nimport {Profile} from \"./components/Profile/Profile\";\r\n\r\nfunction App() {\r\n\r\n\treturn (\r\n\t\t\t<div className=\"App\">\r\n\t\t\t<header>\r\n\t\t\t\t<Navbar/>\r\n\t\t\t</header>\r\n\t\t\t<Route path={'/profile/:userId?'}\r\n\t\t\t       render={() => <Profile/>}/>\r\n\t\t\t<Route path={'/login'}\r\n\t\t\t       render={() => <LoginPage/>}/>\r\n\t\t\t<Route path={'/register'}\r\n\t\t\t       render={() => <RegisterContainer/>}/>\r\n\t\t\t<Route path={'/passwordRecovery'}\r\n\t\t\t       render={() => <PasswordRecovery/>}/>\r\n\t\t\t<Route path={'/set-new-password/:token?'}\r\n\t\t\t       render={() => <PasswordCreation/>}/>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default App;\r\n","import { Dispatch } from \"redux\"\r\nimport {authAPI} from \"../api/api\";\r\n\r\n\r\nconst initialState: InitialStateType = {\r\n    isInitialized: false,\r\n}\r\n\r\nexport const appReducer = (state: InitialStateType  = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        // case 'APP/SET-STATUS':\r\n        //     return {...state, status: action.status}\r\n        // case 'APP/SET-ERROR':\r\n        //     return {...state, error: action.error}\r\n        case \"APP/INITIALIZE-APP\":\r\n            return {...state, isInitialized: action.isInitialized}\r\n        default:\r\n            return {...state}\r\n    }\r\n}\r\n\r\n\r\nexport const initializeAppAC = (isInitialized: boolean) => ({type: 'APP/INITIALIZE-APP', isInitialized} as const)\r\n\r\n\r\nexport const initializeAppTC = () => (dispatch: Dispatch) => {\r\n    authAPI.me().then(res => {\r\n        try {\r\n            dispatch(initializeAppAC(true))\r\n        } catch (e) {\r\n            dispatch(initializeAppAC(true))\r\n            console.log(e.response.data.error)\r\n        }\r\n\r\n    })\r\n}\r\n\r\nexport type InitialStateType = {\r\n    isInitialized: boolean\r\n}\r\n\r\nexport type InitializeAppActionType = ReturnType<typeof initializeAppAC>\r\n\r\n\r\ntype ActionsType = | InitializeAppActionType\r\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport {registerReducer} from \"./register-reducer\";\r\nimport passwordRecoveryReducer from './passwordRecovery-reducer';\r\nimport pssawordCreationReducer from './pssawordCreation-reducer';\r\nimport loginReducer from './login-reducer';\r\nimport {appReducer} from \"./app-reducer\";\r\n\r\n\r\nconst reducers = combineReducers({\r\n  register: registerReducer,\r\n  pwRecoveryRequest: passwordRecoveryReducer,\r\n  passwordUpdate: pssawordCreationReducer,\r\n  login: loginReducer,\r\n  app: appReducer\r\n});\r\n\r\nexport const store = createStore(reducers, applyMiddleware(thunkMiddleware));\r\n\r\nexport type AppRootStateType = ReturnType<typeof reducers>\r\n\r\n// @ts-ignore\r\nwindow.store = store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from 'react-redux';\r\nimport {HashRouter} from 'react-router-dom';\r\nimport App from './App';\r\nimport {store} from './redux/redux-store';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <HashRouter>\r\n            <Provider store={store}>\r\n                <App/>\r\n            </Provider>\r\n        </HashRouter>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}