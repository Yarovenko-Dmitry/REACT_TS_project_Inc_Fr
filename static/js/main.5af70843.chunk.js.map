{"version":3,"sources":["serviceWorker.ts","components/Navbar/Navbar.tsx","components/Profile/ProfileContainer.tsx","api/api.ts","redux/login-reducer.ts","components/auth/Login/LoginPage.tsx","redux/register-reducer.ts","components/auth/Register/RegisterContainer.tsx","redux/passwordRecovery-reducer.ts","components/auth/PasswordRecovery/PasswordRecovery.tsx","redux/pssawordCreation-reducer.ts","components/auth/PasswordCreation/PasswordCreation.tsx","App.tsx","redux/redux-store.ts","index.tsx","components/Navbar/Navbar.module.css","components/auth/PasswordRecovery/recoveryPage.module.css","components/auth/PasswordCreation/passwordCreation.module.css"],"names":["Boolean","window","location","hostname","match","Navbar","to","className","s","btn","activeClassName","active","ProfileContainer","instance","axios","create","withCredentials","baseURL","passwordRecovery","email","post","from","message","password","resetPasswordToken","authAPI","rememberMe","data","internalState","_id","name","avatar","publicCardPacksCount","created","updated","isAdmin","verified","error","setUserDataAC","type","setLoadingAC","loading","setErrorAC","loginReducer","state","action","LoginPage","getState","useSelector","login","LoginForm","dispatch","useDispatch","formik","useFormik","initialValues","onSubmit","values","then","res","catch","response","errorObject","request","setLoginTC","console","log","JSON","stringify","handleSubmit","htmlFor","id","onChange","handleChange","value","isRegistered","RegisterContainer","register","validate","a","Grid","container","justify","item","xs","FormControl","FormLabel","FormGroup","TextField","label","margin","getFieldProps","Button","variant","color","success","setSuccessAC","passwordRecoveryReducer","PasswordRecovery","pwRecoveryRequest","recoverPasswordTC","trim","style","wrapper","form","required","placeholder","disabled","pssawordCreationReducer","validationSchema","Yup","shape","changepassword","when","is","val","length","oneOf","PasswordCreation","passwordUpdate","token","useParams","status","setNewPasswordTC","confirm","errors","onBlur","handleBlur","App","path","render","reducers","combineReducers","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.5af70843.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport s from './Navbar.module.css';\r\nimport {NavLink} from 'react-router-dom';\r\n\r\nconst Navbar = () => {\r\n\treturn (\r\n\t\t<nav>\r\n\t\t\t<NavLink to={'/profile'} className={s.btn} activeClassName={s.active}>\r\n\t\t\t\tprofile\r\n\t\t\t</NavLink>\r\n\t\t\t<NavLink to={'/login'} className={s.btn} activeClassName={s.active}>\r\n\t\t\t\tlogin\r\n\t\t\t</NavLink>\r\n\t\t\t<NavLink to={'/register'} className={s.btn} activeClassName={s.active}>\r\n\t\t\t\tregistration\r\n\t\t\t</NavLink>\r\n\t\t\t<NavLink to={'/passwordRecovery'} className={s.btn} activeClassName={s.active}>\r\n\t\t\t\trecovery\r\n\t\t\t</NavLink>\r\n\t\t\t<NavLink to={'/set-new-password'} className={s.btn} activeClassName={s.active}>\r\n\t\t\t\tcreate a new pw\r\n\t\t\t</NavLink>\r\n\t\t</nav>\r\n\t);\r\n};\r\nexport default Navbar;\r\n\r\n","import React from 'react';\r\n\r\nexport const ProfileContainer = () => {\r\n  return (\r\n    <div>\r\n      ProfileContainer\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default 1","import axios from 'axios';\r\n\r\nconst instance = axios.create({\r\n\twithCredentials: true,\r\n\tbaseURL: 'https://neko-back.herokuapp.com/2.0',\r\n});\r\n\r\nexport const passwordRecovery = {\r\n\tgetToken(email: string) {\r\n\t\tlet promise = instance.post(`/auth/forgot/`, {\r\n\t\t\temail,\r\n\t\t\tfrom: 'password-reset-server <noreply@noreply.it>',\r\n\t\t\tmessage: `\r\n\t\t\t\t\t<div style=\"background-color: lime; padding: 15px\">\r\n\t\t\t\t\tpassword recovery link: \r\n\t\t\t\t\t<a href='http://localhost:3000/#/set-new-password/$token$'>link</a>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t`\r\n\t\t});\r\n\t\treturn promise;\r\n\t},\r\n\tnewPassword(password:string, resetPasswordToken:string) {\r\n\t\treturn instance.post(`/auth/set-new-password`,{password, resetPasswordToken})\r\n\t}\r\n};\r\n\r\nexport const profileAPI = {\r\n\tgetProfile(userId: string) {\r\n\t\treturn instance.get(`profile/` + userId);\r\n\t},\r\n\tgetStatus(userId: string) {\r\n\t\treturn instance.get(`profile/status/` + userId);\r\n\t},\r\n\tupdateStatus(status: string) {\r\n\t\treturn instance.put(`profile/status`, {status: status});\r\n\t}\r\n};\r\n\r\nexport const authAPI = {\r\n    me() {\r\n        return instance.get(`auth/me`)\r\n    },\r\n    login(email: string, password: string, rememberMe = false) {\r\n        return instance.post(`auth/login`, {email, password, rememberMe});\r\n    },\r\n    logout() {\r\n        return instance.delete(`auth/login`);\r\n    },\r\n    register(data: RegisterDataType) {\r\n        debugger\r\n        return instance.post(`/auth/register`, {...data});\r\n    }\r\n}\r\n\r\ntype RegisterDataType = {\r\n\temail: string,\r\n\tpassword: string\r\n}","import {Dispatch} from 'redux';\r\nimport {authAPI} from '../api/api';\r\n\r\n\r\nexport type LoginReducerType = {\r\n  _id: string;\r\n  email: string;\r\n  name: string;\r\n  avatar?: string;\r\n  publicCardPacksCount: number;\r\n  created: string;\r\n  updated: string;\r\n  isAdmin: boolean;\r\n  verified: boolean;\r\n  rememberMe: boolean;\r\n  error: string;\r\n};\r\n\r\nlet internalState: LoginReducerType = {\r\n  _id: '',\r\n  email: '',\r\n  name: '',\r\n  avatar: '',\r\n  publicCardPacksCount: 0,\r\n  created: '',\r\n  updated: '',\r\n  isAdmin: false,\r\n  verified: false,\r\n  rememberMe: false,\r\n  error: '',\r\n};\r\n\r\nconst loginReducer = (state: LoginReducerType = internalState, action: ActionTypes) => {\r\n\r\n  switch (action.type) {\r\n    case 'login/SET_USER_DATA':\r\n      debugger\r\n      return {\r\n        ...action.data\r\n      };\r\n    case 'login/SET_LOADING':\r\n      return {\r\n        ...state, loading: action.loading\r\n      };\r\n    case 'login/SET_ERROR':\r\n      return {\r\n        ...state, error: action.error\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nconst setUserDataAC = (data: LoginReducerType) => ({\r\n  type: 'login/SET_USER_DATA',\r\n  data\r\n} as const);\r\n\r\nconst setLoadingAC = (loading: boolean) => ({\r\n  type: 'login/SET_LOADING',\r\n  loading\r\n} as const);\r\nexport const setErrorAC = (error: string) => ({\r\n  type: 'login/SET_ERROR',\r\n  error\r\n} as const);\r\n\r\ntype ActionTypes =\r\n  | ReturnType<typeof setErrorAC>\r\n  | ReturnType<typeof setUserDataAC>\r\n  | ReturnType<typeof setLoadingAC>\r\n\r\nexport const setLoginTC = (email: string, password: string, rememberMe: boolean = false) => (dispatch: Dispatch<ActionTypes>) => {\r\n  authAPI.login(email, password, rememberMe)\r\n    .then(res => {\r\n\r\n        dispatch(setUserDataAC(res.data))\r\n      }\r\n    )\r\n    .catch(error => {\r\n      const {response} = error;\r\n      const {request, ...errorObject} = response;\r\n      // dispatch(setSuccessAC(false));\r\n      dispatch(setLoadingAC(false));\r\n      return dispatch(setErrorAC(errorObject.data.error));\r\n    });\r\n};\r\n\r\n\r\nexport default loginReducer","import React from 'react';\r\nimport {useFormik} from 'formik';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {setLoginTC} from '../../../redux/login-reducer';\r\nimport {AppRootStateType} from '../../../redux/redux-store';\r\n\r\n\r\nexport const LoginPage = () => {\r\n  const getState = useSelector<AppRootStateType, string>(state => state.login.email)\r\n  return (\r\n    <div>\r\n      LoginPage\r\n      {getState}\r\n      <LoginForm/>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst LoginForm = () => {\r\n  const dispatch = useDispatch()\r\n  const formik: any = useFormik({\r\n    initialValues: {\r\n      email: '',\r\n      password: '',\r\n      rememberMe: false\r\n    },\r\n    onSubmit: values => {\r\n      const {email, password, rememberMe} = values\r\n      dispatch(setLoginTC(email, password, rememberMe))\r\n      console.log(JSON.stringify(values, null, 2));\r\n    },\r\n  });\r\n  return (\r\n    <form onSubmit={formik.handleSubmit}>\r\n      <label htmlFor=\"email\">Email Address</label>\r\n      <input\r\n        id=\"email\"\r\n        name=\"email\"\r\n        type=\"email\"\r\n        onChange={formik.handleChange}\r\n        value={formik.values.email}\r\n      />\r\n      <label htmlFor=\"password\">password</label>\r\n      <input\r\n        id=\"password\"\r\n        name=\"password\"\r\n        type=\"password\"\r\n        onChange={formik.handleChange}\r\n        value={formik.values.password}\r\n      />\r\n      <label htmlFor=\"rememberMe\">rememberMe</label>\r\n      <input\r\n        id=\"rememberMe\"\r\n        name=\"rememberMe\"\r\n        type=\"checkbox\"\r\n        onChange={formik.handleChange}\r\n        value={formik.values.rememberMe}\r\n      />\r\n      <button type=\"submit\">Submit</button>\r\n    </form>\r\n  );\r\n};","import {Dispatch} from 'redux';\r\nimport {authAPI} from '../api/api';\r\n\r\nlet internalState: RegisterReducerType = {\r\n\tisRegistered: false\r\n};\r\n\r\nexport const registerReducer = (state: RegisterReducerType = internalState,\r\n\taction: ActionsType) => {\r\n\r\n\tswitch (action.type) {\r\n\t\tcase 'register/SET-IS-REGISTERED':\r\n\t\t\treturn {...state, isRegistered: action.value};\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n};\r\n\r\nconst setRegisterAC = (value: boolean) => ({\r\n\ttype: 'register/SET-IS-REGISTERED', value\r\n});\r\n\r\nexport const RegisterTC = (data: RegisterParamsType) => async (dispatch: Dispatch<ActionsType>) => {\r\n    try {\r\n        let response = await authAPI.register(data)\r\n            dispatch(setRegisterAC(true))\r\n    } catch (e) {\r\n        console.log(e)\r\n    }\r\n}\r\n\r\n\r\n//types\r\ntype RegisterReducerType = {\r\n\tisRegistered: boolean\r\n};\r\ntype ActionsType = ReturnType<typeof setRegisterAC>\r\ntype ThunkDispatch = Dispatch<ActionsType>\r\n\r\ntype RegisterParamsType = {\r\n\temail: string\r\n\tpassword: string\r\n}","import React from 'react';\r\nimport {useFormik} from \"formik\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {Button, FormControl, FormGroup, FormLabel, Grid, TextField} from \"@material-ui/core\";\r\nimport {Redirect} from 'react-router-dom';\r\nimport {RegisterTC} from \"../../../redux/register-reducer\";\r\nimport {AppRootStateType} from \"../../../redux/redux-store\";\r\n\r\nexport const RegisterContainer = () => {\r\n    const dispatch = useDispatch()\r\n    const isRegistered = useSelector<AppRootStateType, boolean>(state => state.register.isRegistered)\r\n    const formik = useFormik({\r\n        validate: (values: any) => {\r\n\r\n        },\r\n        initialValues: {\r\n            email: '',\r\n            password: ''\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(RegisterTC(values))\r\n        }\r\n    })\r\n\r\n    if (isRegistered) {\r\n        return <Redirect to={'/login'}/>\r\n    }\r\n\r\n    return (\r\n        <Grid container justify=\"center\">\r\n            <Grid item xs={4}>\r\n                <form onSubmit={formik.handleSubmit}>\r\n                    <FormControl>\r\n                        <FormLabel>\r\n                            <p>\r\n                                Registration\r\n                            </p>\r\n                        </FormLabel>\r\n                        <FormGroup>\r\n                            <TextField\r\n                                label=\"Email\"\r\n                                margin=\"normal\"\r\n                                {...formik.getFieldProps('email')}\r\n                            />\r\n                            <TextField\r\n                                type=\"password\"\r\n                                label=\"Password\"\r\n                                margin=\"normal\"\r\n                                {...formik.getFieldProps('password')}\r\n                            />\r\n                            <Button type={'submit'} variant={'contained'} color={'primary'}>Register</Button>\r\n                        </FormGroup>\r\n                    </FormControl>\r\n                </form>\r\n            </Grid>\r\n        </Grid>\r\n    )\r\n}\r\n\r\n","import {passwordRecovery} from '../api/api';\r\nimport {Dispatch} from 'redux';\r\n\r\nexport type PasswordRecoveryReducerType = {\r\n\terror: string\r\n\tsuccess: boolean\r\n\tloading: boolean\r\n};\r\n\r\nlet internalState: PasswordRecoveryReducerType = {\r\n\terror: '',\r\n\tsuccess: false,\r\n\tloading: false\r\n};\r\n\r\nconst passwordRecoveryReducer = (state: PasswordRecoveryReducerType = internalState,\r\n\taction: ActionTypes) => {\r\n\tswitch (action.type) {\r\n\t\tcase 'pwRecovery/SET_ERROR':\r\n\t\t\treturn {\r\n\t\t\t\t...state, error: action.error\r\n\t\t\t};\r\n\t\tcase 'pwRecovery/SET_SUCCESS':\r\n\t\t\treturn {\r\n\t\t\t\t...state, success: action.success\r\n\t\t\t};\r\n\t\tcase 'pwRecovery/SET_LOADING':\r\n\t\t\treturn {\r\n\t\t\t\t...state, loading: action.loading\r\n\t\t\t};\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n};\r\n\r\nexport const setErrorAC = (error: string) => ({\r\n\ttype: 'pwRecovery/SET_ERROR',\r\n\terror\r\n} as const);\r\n\r\nexport const setSuccessAC = (success: boolean) => ({\r\n\ttype: 'pwRecovery/SET_SUCCESS',\r\n\tsuccess\r\n} as const);\r\nexport const setLoadingAC = (loading: boolean) => ({\r\n\ttype: 'pwRecovery/SET_LOADING',\r\n\tloading\r\n} as const);\r\n\r\ntype ActionTypes = ReturnType<typeof setErrorAC> | ReturnType<typeof setSuccessAC> | ReturnType<typeof setLoadingAC>\r\n\r\nexport const recoverPasswordTC = (email: string) => (dispatch: Dispatch<ActionTypes>) => {\r\n\tdispatch(setLoadingAC(true))\r\n\tpasswordRecovery.getToken(email).then(\r\n\t\tres => {\r\n\t\t\tdispatch(setSuccessAC(res.data.success));\r\n\t\t\tdispatch(setErrorAC(''));\r\n\t\t\tdispatch(setLoadingAC(false))\r\n\t\t}\r\n\t).catch(error => {\r\n\t\tconst {response} = error;\r\n\t\tconst {request, ...errorObject} = response;\r\n\t\tdispatch(setSuccessAC(false));\r\n\t\tdispatch(setLoadingAC(false))\r\n\t\treturn dispatch(setErrorAC(errorObject.data.error));\r\n\t});\r\n};\r\n\r\nexport default passwordRecoveryReducer;","import React from 'react';\r\nimport style from './recoveryPage.module.css';\r\nimport {useFormik} from 'formik';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {recoverPasswordTC} from '../../../redux/passwordRecovery-reducer';\r\nimport {AppRootStateType} from '../../../redux/redux-store';\r\n\r\nexport const PasswordRecovery = () => {\r\n\r\n\tconst dispatch = useDispatch();\r\n\r\n\tconst error = useSelector<AppRootStateType, string>(state => state.pwRecoveryRequest.error);\r\n\tconst success = useSelector<AppRootStateType, boolean>(state => state.pwRecoveryRequest.success);\r\n\tconst loading = useSelector<AppRootStateType, boolean>(state => state.pwRecoveryRequest.loading);\r\n\r\n\tconst formik = useFormik({\r\n\t\tinitialValues: {\r\n\t\t\temail: ''\r\n\t\t},\r\n\t\tonSubmit: values => {\r\n\t\t\tconst {email} = values;\r\n\t\t\tdispatch(recoverPasswordTC(email.trim()));\r\n\t\t}\r\n\t});\r\n\r\n\treturn (\r\n\t\t<section>\r\n\t\t\t<div className={style.container}>\r\n\t\t\t\t<div className={style.wrapper}>\r\n\t\t\t\t\t<div className={style.form}>\r\n\t\t\t\t\t\t<h1>Forgot password?</h1>\r\n\t\t\t\t\t\t<form onSubmit={formik.handleSubmit}>\r\n\t\t\t\t\t\t\t<div className={style.error}>{error}</div>\r\n\t\t\t\t\t\t\t{success &&\r\n                            <div className={style.success}>An email with further instructions has\r\n                                been sent to the address provided. Please check your email!</div>}\r\n\t\t\t\t\t\t\t<input type=\"email\" required placeholder=\"Enter your email\"\r\n\t\t\t\t\t\t\t       {...formik.getFieldProps('email')}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t<button disabled={loading} className={style.btn}>Send</button>\r\n\t\t\t\t\t\t</form>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</section>\r\n\t);\r\n};\r\n\r\n","import {Dispatch} from 'redux';\r\nimport {passwordRecovery} from '../api/api';\r\n\r\nexport type PssawordCreationReducerType = {\r\n\terror: string\r\n\tsuccess: boolean\r\n\tloading: boolean\r\n};\r\n\r\nlet internalState: PssawordCreationReducerType = {\r\n\terror: '',\r\n\tsuccess: false,\r\n\tloading: false\r\n};\r\n\r\nconst pssawordCreationReducer = (state: PssawordCreationReducerType = internalState,\r\n\taction: ActionTypes) => {\r\n\r\n\tswitch (action.type) {\r\n\t\tcase 'pwCreation/SET_SUCCESS':\r\n\t\t\treturn {\r\n\t\t\t\t...state, success: action.success\r\n\t\t\t};\r\n\t\tcase 'pwCreation/SET_LOADING':\r\n\t\t\treturn {\r\n\t\t\t\t...state, loading: action.loading\r\n\t\t\t};\r\n\t\tcase 'pwCreation/SET_ERROR':\r\n\t\t\treturn {\r\n\t\t\t\t...state, error: action.error\r\n\t\t\t};\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n};\r\n\r\nconst setSuccessAC = (success: boolean) => ({\r\n\ttype: 'pwCreation/SET_SUCCESS',\r\n\tsuccess\r\n} as const);\r\nconst setLoadingAC = (loading: boolean) => ({\r\n\ttype: 'pwCreation/SET_LOADING',\r\n\tloading\r\n} as const);\r\nexport const setErrorAC = (error: string) => ({\r\n\ttype: 'pwCreation/SET_ERROR',\r\n\terror\r\n} as const);\r\n\r\ntype ActionTypes =\r\n\tReturnType<typeof setErrorAC>\r\n\t| ReturnType<typeof setSuccessAC>\r\n\t| ReturnType<typeof setLoadingAC>\r\n\r\nexport const setNewPasswordTC = (password: string,\r\n\ttoken: string) => (dispatch: Dispatch<ActionTypes>) => {\r\n\tdispatch(setLoadingAC(true));\r\n\tpasswordRecovery.newPassword(password, token).then(\r\n\t\tres => {\r\n\t\t\tif (res.status === 200) {\r\n\t\t\t\tdispatch(setSuccessAC(true));\r\n\t\t\t\tdispatch(setErrorAC(''));\r\n\t\t\t\tdispatch(setLoadingAC(false));\r\n\t\t\t}\r\n\t\t}\r\n\t).catch(error => {\r\n\t\tconst {response} = error;\r\n\t\tconst {request, ...errorObject} = response;\r\n\t\tdispatch(setSuccessAC(false));\r\n\t\tdispatch(setLoadingAC(false));\r\n\t\treturn dispatch(setErrorAC(errorObject.data.error));\r\n\t});\r\n};\r\n\r\nexport default pssawordCreationReducer;","import React from 'react';\r\nimport {useParams, Redirect} from 'react-router-dom';\r\nimport style from './passwordCreation.module.css';\r\nimport {useFormik} from 'formik';\r\nimport * as Yup from 'yup';\r\nimport {setNewPasswordTC} from '../../../redux/pssawordCreation-reducer';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from '../../../redux/redux-store';\r\n\r\nconst validationSchema = Yup.object().shape({\r\n\tpassword: Yup.string().required('This field is required'),\r\n\tchangepassword: Yup.string().when('password', {\r\n\t\tis: val => (val && val.length > 0 ? true : false),\r\n\t\tthen: Yup.string().oneOf(\r\n\t\t\t[Yup.ref('password')],\r\n\t\t\t'Both password need to be the same'\r\n\t\t)\r\n\t})\r\n});\r\n\r\nexport const PasswordCreation = () => {\r\n\r\n\tconst error = useSelector<AppRootStateType, any>(state => state.passwordUpdate.error);\r\n\tconst success = useSelector<AppRootStateType, any>(state => state.passwordUpdate.success);\r\n\tconst loading = useSelector<AppRootStateType, any>(state => state.passwordUpdate.loading);\r\n\r\n\tconst {token} = useParams();\r\n\tconst dispatch = useDispatch();\r\n\r\n\tconst formik = useFormik({\r\n\t\tinitialValues: {\r\n\t\t\tpassword: '',\r\n\t\t\tchangepassword: ''\r\n\t\t},\r\n\t\tvalidationSchema,\r\n\t\tonSubmit: values => {\r\n\t\t\tconst {password} = values;\r\n\t\t\tdispatch(setNewPasswordTC(password, token));\r\n\t\t}\r\n\t});\r\n\r\n\tif (success) {\r\n\t\twindow.confirm('Your password has been changed!')\r\n\t\treturn <Redirect to={'/'}/>;\r\n\t}\r\n\r\n\treturn (\r\n\t\t<section>\r\n\t\t\t<div className={style.container}>\r\n\t\t\t\t<div className={style.wrapper}>\r\n\t\t\t\t\t<div className={style.form}>\r\n\t\t\t\t\t\t<h1>Set new password</h1>\r\n\t\t\t\t\t\t<form onSubmit={formik.handleSubmit}>\r\n\t\t\t\t\t\t\t<div className={style.error}>{formik.errors.changepassword}</div>\r\n\t\t\t\t\t\t\t<div className={style.error}>{error}</div>\r\n\t\t\t\t\t\t\t<span className=\"error\" style={{color: 'red'}}>\r\n              {formik.errors.password}\r\n            </span>\r\n\t\t\t\t\t\t\t<input\r\n\t\t\t\t\t\t\t\tplaceholder=\"Enter new password\"\r\n\t\t\t\t\t\t\t\trequired\r\n\t\t\t\t\t\t\t\ttype=\"password\"\r\n\t\t\t\t\t\t\t\tname=\"password\"\r\n\t\t\t\t\t\t\t\tonBlur={formik.handleBlur}\r\n\t\t\t\t\t\t\t\tonChange={formik.handleChange}\r\n\t\t\t\t\t\t\t\tvalue={formik.values.password}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t<span className=\"error\" style={{color: 'red'}}>\r\n              {formik.errors.password}\r\n            </span>\r\n\t\t\t\t\t\t\t<input\r\n\t\t\t\t\t\t\t\tplaceholder=\"Confirm Password\"\r\n\t\t\t\t\t\t\t\trequired\r\n\t\t\t\t\t\t\t\ttype=\"password\"\r\n\t\t\t\t\t\t\t\tname=\"changepassword\"\r\n\t\t\t\t\t\t\t\tonBlur={formik.handleBlur}\r\n\t\t\t\t\t\t\t\tonChange={formik.handleChange}\r\n\t\t\t\t\t\t\t\tvalue={formik.values.changepassword}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t<button disabled={loading || formik.errors.changepassword || formik.errors.password} className={style.btn}>Send</button>\r\n\t\t\t\t\t\t</form>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</section>\r\n\t);\r\n};","import React from 'react';\r\nimport './App.css';\r\nimport Navbar from './components/Navbar/Navbar';\r\nimport {ButtonCancel, ButtonSelect} from './components/common/Button/Button';\r\nimport {Route} from 'react-router-dom';\r\nimport {ProfileContainer} from './components/Profile/ProfileContainer';\r\nimport {LoginPage} from './components/auth/Login/LoginPage';\r\nimport {RegisterContainer} from './components/auth/Register/RegisterContainer';\r\nimport {PasswordRecovery} from './components/auth/PasswordRecovery/PasswordRecovery';\r\nimport {PasswordCreation} from './components/auth/PasswordCreation/PasswordCreation';\r\n\r\nfunction App() {\r\n\treturn (\r\n\t\t<div className=\"App\">\r\n\t\t\t<header>\r\n\t\t\t\t<Navbar/>\r\n\t\t\t</header>\r\n\t\t\t<Route path={'/profile/:userId?'}\r\n\t\t\t       render={() => <ProfileContainer/>}/>\r\n\t\t\t<Route path={'/login'}\r\n\t\t\t       render={() => <LoginPage/>}/>\r\n\t\t\t<Route path={'/register'}\r\n\t\t\t       render={() => <RegisterContainer/>}/>\r\n\t\t\t<Route path={'/passwordRecovery'}\r\n\t\t\t       render={() => <PasswordRecovery/>}/>\r\n\t\t\t<Route path={'/set-new-password/:token?'}\r\n\t\t\t       render={() => <PasswordCreation/>}/>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default App;\r\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport {registerReducer} from \"./register-reducer\";\r\nimport passwordRecoveryReducer from './passwordRecovery-reducer';\r\nimport pssawordCreationReducer from './pssawordCreation-reducer';\r\nimport loginReducer from './login-reducer';\r\n\r\n\r\nconst reducers = combineReducers({\r\n  register: registerReducer,\r\n  pwRecoveryRequest: passwordRecoveryReducer,\r\n  passwordUpdate: pssawordCreationReducer,\r\n  login: loginReducer\r\n});\r\n\r\nexport const store = createStore(reducers, applyMiddleware(thunkMiddleware));\r\n\r\nexport type AppRootStateType = ReturnType<typeof reducers>\r\n\r\n// @ts-ignore\r\nwindow.store = store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from 'react-redux';\r\nimport {HashRouter} from 'react-router-dom';\r\nimport App from './App';\r\nimport {store} from './redux/redux-store';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <HashRouter>\r\n            <Provider store={store}>\r\n                <App/>\r\n            </Provider>\r\n        </HashRouter>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"Navbar_btn__2LLvD\",\"active\":\"Navbar_active__1q7UT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"recoveryPage_form__90bKw\",\"btn\":\"recoveryPage_btn__3mJme\",\"error\":\"recoveryPage_error__13rTi\",\"success\":\"recoveryPage_success__2budS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"passwordCreation_form__2d75P\",\"btn\":\"passwordCreation_btn__1hty7\",\"error\":\"passwordCreation_error__2_fJR\",\"success\":\"passwordCreation_success__3qztO\"};"],"sourceRoot":""}