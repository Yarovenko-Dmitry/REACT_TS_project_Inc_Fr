{"version":3,"sources":["serviceWorker.ts","components/Navbar/Navbar.tsx","components/Profile/ProfileContainer.tsx","components/auth/Login/LoginPage.tsx","api/api.ts","redux/register-reducer.ts","components/auth/Register/RegisterContainer.tsx","redux/passwordRecovery-reducer.ts","components/auth/PasswordRecovery/PasswordRecovery.tsx","redux/pssawordCreation-reducer.ts","components/auth/PasswordCreation/PasswordCreation.tsx","App.tsx","redux/redux-store.ts","index.tsx","components/Navbar/Navbar.module.css","components/auth/PasswordRecovery/recoveryPage.module.css","components/auth/PasswordCreation/passwordCreation.module.css"],"names":["Boolean","window","location","hostname","match","Navbar","to","className","s","btn","activeClassName","active","ProfileContainer","LoginPage","loginFormValidate","values","errors","email","test","LoginForm","initialValues","password","validate","onSubmit","setSubmitting","isSubmitting","type","name","placeholder","component","disabled","instance","axios","create","withCredentials","baseURL","passwordRecovery","post","from","message","resetPasswordToken","authAPI","data","internalState","isRegistered","RegisterContainer","dispatch","useDispatch","useSelector","state","register","formik","useFormik","a","value","console","log","Grid","container","justify","item","xs","handleSubmit","FormControl","FormLabel","FormGroup","TextField","label","margin","getFieldProps","Button","variant","color","error","success","loading","setErrorAC","setSuccessAC","setLoadingAC","passwordRecoveryReducer","action","PasswordRecovery","pwRecoveryRequest","then","res","catch","response","errorObject","request","recoverPasswordTC","trim","style","wrapper","form","required","pssawordCreationReducer","validationSchema","Yup","shape","changepassword","when","is","val","length","oneOf","PasswordCreation","passwordUpdate","token","useParams","status","setNewPasswordTC","confirm","onBlur","handleBlur","onChange","handleChange","App","path","render","reducers","combineReducers","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.4ee65e67.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport s from './Navbar.module.css';\r\nimport {NavLink} from 'react-router-dom';\r\n\r\nconst Navbar = () => {\r\n\treturn (\r\n\t\t<nav>\r\n\t\t\t<NavLink to={'/profile'} className={s.btn} activeClassName={s.active}>\r\n\t\t\t\tprofile\r\n\t\t\t</NavLink>\r\n\t\t\t<NavLink to={'/login'} className={s.btn} activeClassName={s.active}>\r\n\t\t\t\tlogin\r\n\t\t\t</NavLink>\r\n\t\t\t<NavLink to={'/register'} className={s.btn} activeClassName={s.active}>\r\n\t\t\t\tregistration\r\n\t\t\t</NavLink>\r\n\t\t\t<NavLink to={'/passwordRecovery'} className={s.btn} activeClassName={s.active}>\r\n\t\t\t\trecovery\r\n\t\t\t</NavLink>\r\n\t\t\t<NavLink to={'/set-new-password'} className={s.btn} activeClassName={s.active}>\r\n\t\t\t\tcreate a new pw\r\n\t\t\t</NavLink>\r\n\t\t</nav>\r\n\t);\r\n};\r\nexport default Navbar;\r\n\r\n","import React from 'react';\r\n\r\nexport const ProfileContainer = () => {\r\n  return (\r\n    <div>\r\n      ProfileContainer\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default 1","import React from 'react';\r\nimport {ErrorMessage, Field, Form, Formik} from 'formik';\r\n\r\n\r\nexport const LoginPage = () => {\r\n  return (\r\n    <div>\r\n      LoginPage\r\n      <LoginForm/>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst loginFormValidate = (values: any) => {\r\n  const errors: any = {};\r\n  if (!values.email) {\r\n    errors.email = 'Required';\r\n  } else if (\r\n    !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test(values.email)\r\n  ) {\r\n    errors.email = 'Invalid email address';\r\n  }\r\n}\r\n\r\nconst LoginForm = () => {\r\n\r\n  const submit = (values: any, {setSubmitting} : {setSubmitting: (isSubmitting: boolean) => void}) => {\r\n\r\n\r\n    // setTimeout(() => {\r\n    //   // alert(JSON.stringify(values, null, 2));\r\n    //   setSubmitting(false);\r\n    // }, 400);\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Formik\r\n        initialValues={{email: '', password: ''}}\r\n        validate={loginFormValidate}\r\n        onSubmit={submit}\r\n      >\r\n        {({isSubmitting}) => (\r\n          <Form>\r\n            <Field type=\"email\"\r\n                   name=\"email\"\r\n                   placeholder=\"email\"\r\n            />\r\n            <ErrorMessage name=\"email\"\r\n                          component=\"div\"/>\r\n            <Field type=\"password\"\r\n                   name=\"password\"\r\n                   placeholder=\"password\"/>\r\n            <ErrorMessage name=\"password\"\r\n                          component=\"div\"/>\r\n            <button type=\"submit\"\r\n                    disabled={isSubmitting}>\r\n              Submit\r\n            </button>\r\n          </Form>\r\n        )}\r\n      </Formik>\r\n    </div>\r\n  )\r\n\r\n}\r\n\r\n\r\n","import axios from 'axios';\r\n\r\nconst instance = axios.create({\r\n\twithCredentials: true,\r\n\tbaseURL: 'https://neko-back.herokuapp.com/2.0',\r\n});\r\n\r\nexport const passwordRecovery = {\r\n\tgetToken(email: string) {\r\n\t\tlet promise = instance.post(`/auth/forgot/`, {\r\n\t\t\temail,\r\n\t\t\tfrom: 'password-reset-server <noreply@noreply.it>',\r\n\t\t\tmessage: `\r\n\t\t\t\t\t<div style=\"background-color: lime; padding: 15px\">\r\n\t\t\t\t\tpassword recovery link: \r\n\t\t\t\t\t<a href='http://localhost:3000/#/set-new-password/$token$'>link</a>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t`\r\n\t\t});\r\n\t\treturn promise;\r\n\t},\r\n\tnewPassword(password:string, resetPasswordToken:string) {\r\n\t\treturn instance.post(`/auth/set-new-password`,{password, resetPasswordToken})\r\n\t}\r\n};\r\n\r\nexport const profileAPI = {\r\n\tgetProfile(userId: string) {\r\n\t\treturn instance.get(`profile/` + userId);\r\n\t},\r\n\tgetStatus(userId: string) {\r\n\t\treturn instance.get(`profile/status/` + userId);\r\n\t},\r\n\tupdateStatus(status: string) {\r\n\t\treturn instance.put(`profile/status`, {status: status});\r\n\t}\r\n};\r\n\r\nexport const authAPI = {\r\n    me() {\r\n        return instance.get(`auth/me`)\r\n    },\r\n    login(email: string, password: string, rememberMe = false) {\r\n        return instance.post(`auth/login`, {email, password, rememberMe});\r\n    },\r\n    logout() {\r\n        return instance.delete(`auth/login`);\r\n    },\r\n    register(data: RegisterDataType) {\r\n        debugger\r\n        return instance.post(`/auth/register`, {...data});\r\n    }\r\n}\r\n\r\ntype RegisterDataType = {\r\n\temail: string,\r\n\tpassword: string\r\n}","import {Dispatch} from 'redux';\r\nimport {authAPI} from '../api/api';\r\n\r\nlet internalState: RegisterReducerType = {\r\n\tisRegistered: false\r\n};\r\n\r\nexport const registerReducer = (state: RegisterReducerType = internalState,\r\n\taction: ActionsType) => {\r\n\r\n\tswitch (action.type) {\r\n\t\tcase 'register/SET-IS-REGISTERED':\r\n\t\t\treturn {...state, isRegistered: action.value};\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n};\r\n\r\nconst setRegisterAC = (value: boolean) => ({\r\n\ttype: 'register/SET-IS-REGISTERED', value\r\n});\r\n\r\nexport const RegisterTC = (data: RegisterParamsType) => async (dispatch: Dispatch<ActionsType>) => {\r\n    try {\r\n        let response = await authAPI.register(data)\r\n            dispatch(setRegisterAC(true))\r\n    } catch (e) {\r\n        console.log(e)\r\n    }\r\n}\r\n\r\n\r\n//types\r\ntype RegisterReducerType = {\r\n\tisRegistered: boolean\r\n};\r\ntype ActionsType = ReturnType<typeof setRegisterAC>\r\ntype ThunkDispatch = Dispatch<ActionsType>\r\n\r\ntype RegisterParamsType = {\r\n\temail: string\r\n\tpassword: string\r\n}","import React from 'react';\r\nimport {useFormik} from \"formik\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {Button, FormControl, FormGroup, FormLabel, Grid, TextField} from \"@material-ui/core\";\r\nimport {Redirect} from 'react-router-dom';\r\nimport {RegisterTC} from \"../../../redux/register-reducer\";\r\nimport {AppRootStateType} from \"../../../redux/redux-store\";\r\n\r\nexport const RegisterContainer = () => {\r\n    const dispatch = useDispatch()\r\n    const isRegistered = useSelector<AppRootStateType, boolean>(state => state.register.isRegistered)\r\n    const formik = useFormik({\r\n        validate: (values: any) => {\r\n\r\n        },\r\n        initialValues: {\r\n            email: '',\r\n            password: ''\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(RegisterTC(values))\r\n        }\r\n    })\r\n\r\n    if (isRegistered) {\r\n        return <Redirect to={'/login'}/>\r\n    }\r\n\r\n    return (\r\n        <Grid container justify=\"center\">\r\n            <Grid item xs={4}>\r\n                <form onSubmit={formik.handleSubmit}>\r\n                    <FormControl>\r\n                        <FormLabel>\r\n                            <p>\r\n                                Registration\r\n                            </p>\r\n                        </FormLabel>\r\n                        <FormGroup>\r\n                            <TextField\r\n                                label=\"Email\"\r\n                                margin=\"normal\"\r\n                                {...formik.getFieldProps('email')}\r\n                            />\r\n                            <TextField\r\n                                type=\"password\"\r\n                                label=\"Password\"\r\n                                margin=\"normal\"\r\n                                {...formik.getFieldProps('password')}\r\n                            />\r\n                            <Button type={'submit'} variant={'contained'} color={'primary'}>Register</Button>\r\n                        </FormGroup>\r\n                    </FormControl>\r\n                </form>\r\n            </Grid>\r\n        </Grid>\r\n    )\r\n}\r\n\r\n","import {passwordRecovery} from '../api/api';\r\nimport {Dispatch} from 'redux';\r\n\r\nexport type PasswordRecoveryReducerType = {\r\n\terror: string\r\n\tsuccess: boolean\r\n\tloading: boolean\r\n};\r\n\r\nlet internalState: PasswordRecoveryReducerType = {\r\n\terror: '',\r\n\tsuccess: false,\r\n\tloading: false\r\n};\r\n\r\nconst passwordRecoveryReducer = (state: PasswordRecoveryReducerType = internalState,\r\n\taction: ActionTypes) => {\r\n\tswitch (action.type) {\r\n\t\tcase 'pwRecovery/SET_ERROR':\r\n\t\t\treturn {\r\n\t\t\t\t...state, error: action.error\r\n\t\t\t};\r\n\t\tcase 'pwRecovery/SET_SUCCESS':\r\n\t\t\treturn {\r\n\t\t\t\t...state, success: action.success\r\n\t\t\t};\r\n\t\tcase 'pwRecovery/SET_LOADING':\r\n\t\t\treturn {\r\n\t\t\t\t...state, loading: action.loading\r\n\t\t\t};\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n};\r\n\r\nexport const setErrorAC = (error: string) => ({\r\n\ttype: 'pwRecovery/SET_ERROR',\r\n\terror\r\n} as const);\r\n\r\nexport const setSuccessAC = (success: boolean) => ({\r\n\ttype: 'pwRecovery/SET_SUCCESS',\r\n\tsuccess\r\n} as const);\r\nexport const setLoadingAC = (loading: boolean) => ({\r\n\ttype: 'pwRecovery/SET_LOADING',\r\n\tloading\r\n} as const);\r\n\r\ntype ActionTypes = ReturnType<typeof setErrorAC> | ReturnType<typeof setSuccessAC> | ReturnType<typeof setLoadingAC>\r\n\r\nexport const recoverPasswordTC = (email: string) => (dispatch: Dispatch<ActionTypes>) => {\r\n\tdispatch(setLoadingAC(true))\r\n\tpasswordRecovery.getToken(email).then(\r\n\t\tres => {\r\n\t\t\tdispatch(setSuccessAC(res.data.success));\r\n\t\t\tdispatch(setErrorAC(''));\r\n\t\t\tdispatch(setLoadingAC(false))\r\n\t\t}\r\n\t).catch(error => {\r\n\t\tconst {response} = error;\r\n\t\tconst {request, ...errorObject} = response;\r\n\t\tdispatch(setSuccessAC(false));\r\n\t\tdispatch(setLoadingAC(false))\r\n\t\treturn dispatch(setErrorAC(errorObject.data.error));\r\n\t});\r\n};\r\n\r\nexport default passwordRecoveryReducer;","import React from 'react';\r\nimport style from './recoveryPage.module.css';\r\nimport {useFormik} from 'formik';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {recoverPasswordTC} from '../../../redux/passwordRecovery-reducer';\r\nimport {AppRootStateType} from '../../../redux/redux-store';\r\n\r\nexport const PasswordRecovery = () => {\r\n\r\n\tconst dispatch = useDispatch();\r\n\r\n\tconst error = useSelector<AppRootStateType, string>(state => state.pwRecoveryRequest.error);\r\n\tconst success = useSelector<AppRootStateType, boolean>(state => state.pwRecoveryRequest.success);\r\n\tconst loading = useSelector<AppRootStateType, boolean>(state => state.pwRecoveryRequest.loading);\r\n\r\n\tconst formik = useFormik({\r\n\t\tinitialValues: {\r\n\t\t\temail: ''\r\n\t\t},\r\n\t\tonSubmit: values => {\r\n\t\t\tconst {email} = values;\r\n\t\t\tdispatch(recoverPasswordTC(email.trim()));\r\n\t\t}\r\n\t});\r\n\r\n\treturn (\r\n\t\t<section>\r\n\t\t\t<div className={style.container}>\r\n\t\t\t\t<div className={style.wrapper}>\r\n\t\t\t\t\t<div className={style.form}>\r\n\t\t\t\t\t\t<h1>Forgot password?</h1>\r\n\t\t\t\t\t\t<form onSubmit={formik.handleSubmit}>\r\n\t\t\t\t\t\t\t<div className={style.error}>{error}</div>\r\n\t\t\t\t\t\t\t{success &&\r\n                            <div className={style.success}>An email with further instructions has\r\n                                been sent to the address provided. Please check your email!</div>}\r\n\t\t\t\t\t\t\t<input type=\"email\" required placeholder=\"Enter your email\"\r\n\t\t\t\t\t\t\t       {...formik.getFieldProps('email')}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t<button disabled={loading} className={style.btn}>Send</button>\r\n\t\t\t\t\t\t</form>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</section>\r\n\t);\r\n};\r\n\r\n","import {Dispatch} from 'redux';\r\nimport {passwordRecovery} from '../api/api';\r\n\r\nexport type PssawordCreationReducerType = {\r\n\terror: string\r\n\tsuccess: boolean\r\n\tloading: boolean\r\n};\r\n\r\nlet internalState: PssawordCreationReducerType = {\r\n\terror: '',\r\n\tsuccess: false,\r\n\tloading: false\r\n};\r\n\r\nconst pssawordCreationReducer = (state: PssawordCreationReducerType = internalState,\r\n\taction: ActionTypes) => {\r\n\r\n\tswitch (action.type) {\r\n\t\tcase 'pwCreation/SET_SUCCESS':\r\n\t\t\treturn {\r\n\t\t\t\t...state, success: action.success\r\n\t\t\t};\r\n\t\tcase 'pwCreation/SET_LOADING':\r\n\t\t\treturn {\r\n\t\t\t\t...state, loading: action.loading\r\n\t\t\t};\r\n\t\tcase 'pwCreation/SET_ERROR':\r\n\t\t\treturn {\r\n\t\t\t\t...state, error: action.error\r\n\t\t\t};\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n};\r\n\r\nconst setSuccessAC = (success: boolean) => ({\r\n\ttype: 'pwCreation/SET_SUCCESS',\r\n\tsuccess\r\n} as const);\r\nconst setLoadingAC = (loading: boolean) => ({\r\n\ttype: 'pwCreation/SET_LOADING',\r\n\tloading\r\n} as const);\r\nexport const setErrorAC = (error: string) => ({\r\n\ttype: 'pwCreation/SET_ERROR',\r\n\terror\r\n} as const);\r\n\r\ntype ActionTypes =\r\n\tReturnType<typeof setErrorAC>\r\n\t| ReturnType<typeof setSuccessAC>\r\n\t| ReturnType<typeof setLoadingAC>\r\n\r\nexport const setNewPasswordTC = (password: string,\r\n\ttoken: string) => (dispatch: Dispatch<ActionTypes>) => {\r\n\tdispatch(setLoadingAC(true));\r\n\tpasswordRecovery.newPassword(password, token).then(\r\n\t\tres => {\r\n\t\t\tif (res.status === 200) {\r\n\t\t\t\tdispatch(setSuccessAC(true));\r\n\t\t\t\tdispatch(setErrorAC(''));\r\n\t\t\t\tdispatch(setLoadingAC(false));\r\n\t\t\t}\r\n\t\t}\r\n\t).catch(error => {\r\n\t\tconst {response} = error;\r\n\t\tconst {request, ...errorObject} = response;\r\n\t\tdispatch(setSuccessAC(false));\r\n\t\tdispatch(setLoadingAC(false));\r\n\t\treturn dispatch(setErrorAC(errorObject.data.error));\r\n\t});\r\n};\r\n\r\nexport default pssawordCreationReducer;","import React from 'react';\r\nimport {useParams, Redirect} from 'react-router-dom';\r\nimport style from './passwordCreation.module.css';\r\nimport {useFormik} from 'formik';\r\nimport * as Yup from 'yup';\r\nimport {setNewPasswordTC} from '../../../redux/pssawordCreation-reducer';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from '../../../redux/redux-store';\r\n\r\nconst validationSchema = Yup.object().shape({\r\n\tpassword: Yup.string().required('This field is required'),\r\n\tchangepassword: Yup.string().when('password', {\r\n\t\tis: val => (val && val.length > 0 ? true : false),\r\n\t\tthen: Yup.string().oneOf(\r\n\t\t\t[Yup.ref('password')],\r\n\t\t\t'Both password need to be the same'\r\n\t\t)\r\n\t})\r\n});\r\n\r\nexport const PasswordCreation = () => {\r\n\r\n\tconst error = useSelector<AppRootStateType, any>(state => state.passwordUpdate.error);\r\n\tconst success = useSelector<AppRootStateType, any>(state => state.passwordUpdate.success);\r\n\tconst loading = useSelector<AppRootStateType, any>(state => state.passwordUpdate.loading);\r\n\r\n\tconst {token} = useParams();\r\n\tconst dispatch = useDispatch();\r\n\r\n\tconst formik = useFormik({\r\n\t\tinitialValues: {\r\n\t\t\tpassword: '',\r\n\t\t\tchangepassword: ''\r\n\t\t},\r\n\t\tvalidationSchema,\r\n\t\tonSubmit: values => {\r\n\t\t\tconst {password} = values;\r\n\t\t\tdispatch(setNewPasswordTC(password, token));\r\n\t\t}\r\n\t});\r\n\r\n\tif (success) {\r\n\t\twindow.confirm('Your password has been changed!')\r\n\t\treturn <Redirect to={'/'}/>;\r\n\t}\r\n\r\n\treturn (\r\n\t\t<section>\r\n\t\t\t<div className={style.container}>\r\n\t\t\t\t<div className={style.wrapper}>\r\n\t\t\t\t\t<div className={style.form}>\r\n\t\t\t\t\t\t<h1>Set new password</h1>\r\n\t\t\t\t\t\t<form onSubmit={formik.handleSubmit}>\r\n\t\t\t\t\t\t\t<div className={style.error}>{formik.errors.changepassword}</div>\r\n\t\t\t\t\t\t\t<div className={style.error}>{error}</div>\r\n\t\t\t\t\t\t\t<span className=\"error\" style={{color: 'red'}}>\r\n              {formik.errors.password}\r\n            </span>\r\n\t\t\t\t\t\t\t<input\r\n\t\t\t\t\t\t\t\tplaceholder=\"Enter new password\"\r\n\t\t\t\t\t\t\t\trequired\r\n\t\t\t\t\t\t\t\ttype=\"password\"\r\n\t\t\t\t\t\t\t\tname=\"password\"\r\n\t\t\t\t\t\t\t\tonBlur={formik.handleBlur}\r\n\t\t\t\t\t\t\t\tonChange={formik.handleChange}\r\n\t\t\t\t\t\t\t\tvalue={formik.values.password}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t<span className=\"error\" style={{color: 'red'}}>\r\n              {formik.errors.password}\r\n            </span>\r\n\t\t\t\t\t\t\t<input\r\n\t\t\t\t\t\t\t\tplaceholder=\"Confirm Password\"\r\n\t\t\t\t\t\t\t\trequired\r\n\t\t\t\t\t\t\t\ttype=\"password\"\r\n\t\t\t\t\t\t\t\tname=\"changepassword\"\r\n\t\t\t\t\t\t\t\tonBlur={formik.handleBlur}\r\n\t\t\t\t\t\t\t\tonChange={formik.handleChange}\r\n\t\t\t\t\t\t\t\tvalue={formik.values.changepassword}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t<button disabled={loading || formik.errors.changepassword || formik.errors.password} className={style.btn}>Send</button>\r\n\t\t\t\t\t\t</form>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</section>\r\n\t);\r\n};","import React from 'react';\r\nimport './App.css';\r\nimport Navbar from './components/Navbar/Navbar';\r\nimport {ButtonCancel, ButtonSelect} from './components/common/Button/Button';\r\nimport {Route} from 'react-router-dom';\r\nimport {ProfileContainer} from './components/Profile/ProfileContainer';\r\nimport {LoginPage} from './components/auth/Login/LoginPage';\r\nimport {RegisterContainer} from './components/auth/Register/RegisterContainer';\r\nimport {PasswordRecovery} from './components/auth/PasswordRecovery/PasswordRecovery';\r\nimport {PasswordCreation} from './components/auth/PasswordCreation/PasswordCreation';\r\n\r\nfunction App() {\r\n\treturn (\r\n\t\t<div className=\"App\">\r\n\t\t\t<header>\r\n\t\t\t\t<Navbar/>\r\n\t\t\t</header>\r\n\t\t\t<Route path={'/profile/:userId?'}\r\n\t\t\t       render={() => <ProfileContainer/>}/>\r\n\t\t\t<Route path={'/login'}\r\n\t\t\t       render={() => <LoginPage/>}/>\r\n\t\t\t<Route path={'/register'}\r\n\t\t\t       render={() => <RegisterContainer/>}/>\r\n\t\t\t<Route path={'/passwordRecovery'}\r\n\t\t\t       render={() => <PasswordRecovery/>}/>\r\n\t\t\t<Route path={'/set-new-password/:token?'}\r\n\t\t\t       render={() => <PasswordCreation/>}/>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default App;\r\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport {registerReducer} from \"./register-reducer\";\r\nimport passwordRecoveryReducer from './passwordRecovery-reducer';\r\nimport pssawordCreationReducer from './pssawordCreation-reducer';\r\n\r\n\r\nconst reducers = combineReducers({\r\n    register: registerReducer,\r\n    pwRecoveryRequest: passwordRecoveryReducer,\r\n    passwordUpdate: pssawordCreationReducer\r\n\r\n});\r\n\r\nexport const store = createStore(reducers, applyMiddleware(thunkMiddleware));\r\n\r\nexport type AppRootStateType = ReturnType<typeof reducers>\r\n\r\n// @ts-ignore\r\nwindow.store = store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from 'react-redux';\r\nimport {HashRouter} from 'react-router-dom';\r\nimport App from './App';\r\nimport {store} from './redux/redux-store';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <HashRouter>\r\n            <Provider store={store}>\r\n                <App/>\r\n            </Provider>\r\n        </HashRouter>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"Navbar_btn__2LLvD\",\"active\":\"Navbar_active__1q7UT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"recoveryPage_form__90bKw\",\"btn\":\"recoveryPage_btn__3mJme\",\"error\":\"recoveryPage_error__13rTi\",\"success\":\"recoveryPage_success__2budS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"passwordCreation_form__2d75P\",\"btn\":\"passwordCreation_btn__1hty7\",\"error\":\"passwordCreation_error__2_fJR\",\"success\":\"passwordCreation_success__3qztO\"};"],"sourceRoot":""}