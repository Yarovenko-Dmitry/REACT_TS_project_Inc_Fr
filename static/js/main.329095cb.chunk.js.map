{"version":3,"sources":["serviceWorker.ts","components/Navbar/Navbar.tsx","components/Profile/ProfileContainer.tsx","components/common/Button/Button.tsx","components/auth/Login/LoginPage.tsx","api/api.ts","redux/register-reducer.ts","components/auth/Register/RegisterContainer.tsx","components/auth/PasswordRecovery/PasswordRecovery.tsx","components/auth/PasswordCreation/PasswordCreation.tsx","App.tsx","redux/redux-store.ts","index.tsx","components/Navbar/Navbar.module.css","components/auth/PasswordRecovery/recoveryPage.module.css"],"names":["Boolean","window","location","hostname","match","Navbar","to","className","s","btn","activeClassName","activLink","ProfileContainer","ButtonSelect","LoginPage","instance","axios","create","withCredentials","baseURL","authAPI","data","post","internalState","isRegistered","RegisterContainer","dispatch","useDispatch","useSelector","state","register","formik","useFormik","validate","values","initialValues","email","password","onSubmit","a","type","value","console","log","Grid","container","justify","item","xs","handleSubmit","FormControl","FormLabel","FormGroup","TextField","label","margin","getFieldProps","Button","variant","color","PasswordRecovery","style","wrapper","form","required","placeholder","PasswordCreation","App","path","render","reducers","combineReducers","action","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message","module","exports"],"mappings":"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","file":"static/js/main.329095cb.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport s from './Navbar.module.css';\nimport {NavLink} from 'react-router-dom';\n\nconst Navbar = () => {\n\treturn (\n\t\t<nav>\n\t\t\t<NavLink to={'/profile'} className={s.btn} activeClassName={s.activLink}>\n\t\t\t\tprofile\n\t\t\t</NavLink>\n\t\t\t<NavLink to={'/login'} className={s.btn} activeClassName={s.activLink}>\n\t\t\t\tlogin\n\t\t\t</NavLink>\n\t\t\t<NavLink to={'/register'} className={s.btn} activeClassName={s.activLink}>\n\t\t\t\tregistration\n\t\t\t</NavLink>\n\t\t\t<NavLink to={'/passwordRecovery'} className={s.btn} activeClassName={s.activLink}>\n\t\t\t\trecovery\n\t\t\t</NavLink>\n\t\t\t<NavLink to={'/passwordCreation'} className={s.btn} activeClassName={s.activLink}>\n\t\t\t\tcreate a new pw\n\t\t\t</NavLink>\n\t\t</nav>\n\t);\n};\nexport default Navbar;\n\n","import React from 'react';\n\nexport const ProfileContainer = () => {\n  return (\n    <div>\n      ProfileContainer\n    </div>\n  )\n}\n\nexport default 1","import React from 'react';\n\nexport const ButtonSelect = () => {\n  return (\n    <div>\n      <button>Select</button>\n    </div>\n  )\n}\n\nexport const ButtonCancel = () => {\n  return (\n    <div>\n      <button>Cancel</button>\n    </div>\n  )\n}","import React from 'react';\nimport {ButtonSelect} from '../../common/Button/Button';\n\n\nexport const LoginPage = () => {\n  return (\n    <div>\n      LoginPage\n      <ButtonSelect/>\n    </div>\n  )\n}\n\nexport default 1","import axios from 'axios';\n\nconst instance = axios.create({\n    withCredentials: true,\n    baseURL: 'https://neko-back.herokuapp.com/2.0',\n    // headers: {\n    //     'API-KEY': '7670157b-55fb-46c4-91b5-ea5772613da8'\n    // }\n});\n\n\nexport const usersAPI = {\n    getUsers(currentPage: number = 1, pageSize: number = 10) {\n        return instance.get(`users?page=${currentPage}&count=${pageSize}`\n        )\n            .then(response => response.data);\n    },\n\n    follow(userId: string) {\n        return instance.post(`follow/${userId}`)\n\n    },\n    unFollow(userId: string) {\n        return instance.delete(`follow/${userId}`)\n    },\n    getProfile(userId: string) {\n        console.warn('Obsolute method. Please use profileAPI object')\n        return profileAPI.getProfile(userId);\n    }\n}\n\nexport const profileAPI = {\n    getProfile(userId: string) {\n        return instance.get(`profile/` + userId);\n    },\n    getStatus(userId: string) {\n        return instance.get(`profile/status/` + userId);\n    },\n    updateStatus(status: string) {\n        return instance.put(`profile/status`, {status: status});\n    }\n}\n\nexport const authAPI = {\n    me() {\n        return instance.get(`auth/me`)\n    },\n    login(email: string, password: string, rememberMe = false) {\n        return instance.post(`auth/login`, {email, password, rememberMe});\n    },\n    logout() {\n        return instance.delete(`auth/login`);\n    },\n    register(data: RegisterDataType) {\n        debugger\n        return instance.post(`/auth/register`, {...data});\n    }\n}\n\ntype RegisterDataType = {\n    email: string,\n    password: string\n}","import {Dispatch} from \"redux\";\nimport {authAPI} from \"../api/api\";\n\n\nlet internalState: RegisterReducerType = {\n    isRegistered: false\n};\n\nexport const registerReducer = (state: RegisterReducerType = internalState, action: ActionsType) => {\n\n    switch (action.type) {\n        case \"register/SET-IS-REGISTERED\":\n            return {...state, isRegistered: action.value}\n        default:\n            return state;\n    }\n}\n\nconst setRegisterAC = (value: boolean) => ({\n    type: 'register/SET-IS-REGISTERED', value\n})\n\nexport const RegisterTC = (data: RegisterParamsType) => async (dispatch: Dispatch<ActionsType>) => {\n    debugger\n    try {\n        let response = await authAPI.register(data)\n            dispatch(setRegisterAC(true))\n    } catch (e) {\n        console.log(e)\n    }\n\n}\n\n//types\ntype RegisterReducerType = {\n    isRegistered: boolean\n};\ntype ActionsType = ReturnType<typeof setRegisterAC>\ntype ThunkDispatch = Dispatch<ActionsType>\n\ntype RegisterParamsType = {\n    email: string\n    password: string\n}","import React from 'react';\nimport {useFormik} from \"formik\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {Button, FormControl, FormGroup, FormLabel, Grid, TextField} from \"@material-ui/core\";\nimport {Redirect} from 'react-router-dom';\nimport {RegisterTC} from \"../../../redux/register-reducer\";\nimport {AppRootStateType} from \"../../../redux/redux-store\";\n\nexport const RegisterContainer = () => {\n    const dispatch = useDispatch()\n    const isRegistered = useSelector<AppRootStateType, boolean>(state => state.register.isRegistered)\n    const formik = useFormik({\n        validate: (values: any) => {\n\n        },\n        initialValues: {\n            email: '',\n            password: ''\n        },\n        onSubmit: values => {\n            dispatch(RegisterTC(values))\n        }\n    })\n\n    if (isRegistered) {\n        return <Redirect to={'/login'}/>\n    }\n\n    return (\n        <Grid container justify=\"center\">\n            <Grid item xs={4}>\n                <form onSubmit={formik.handleSubmit}>\n                    <FormControl>\n                        <FormLabel>\n                            <p>\n                                Registration\n                            </p>\n                        </FormLabel>\n                        <FormGroup>\n                            <TextField\n                                label=\"Email\"\n                                margin=\"normal\"\n                                {...formik.getFieldProps('email')}\n                            />\n                            <TextField\n                                type=\"password\"\n                                label=\"Password\"\n                                margin=\"normal\"\n                                {...formik.getFieldProps('password')}\n                            />\n                            <Button type={'submit'} variant={'contained'} color={'primary'}>Register</Button>\n                        </FormGroup>\n                    </FormControl>\n                </form>\n            </Grid>\n        </Grid>\n    )\n}\n\n","import React from 'react';\nimport style from './recoveryPage.module.css';\n\nexport const PasswordRecovery = () => {\n\treturn (\n\t\t<section>\n\t\t\t<div className={style.container}>\n\t\t\t\t<div className={style.wrapper}>\n\t\t\t\t\t<div className={style.form}>\n\t\t\t\t\t\t<h1>Forgot password?</h1>\n\t\t\t\t\t\t<form>\n\t\t\t\t\t\t\t<input type=\"email\" required placeholder=\"Enter your email\"/>\n\t\t\t\t\t\t\t<button className={style.btn}>Send</button>\n\t\t\t\t\t\t</form>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</section>\n\t);\n};\n\n","\n\nimport React from 'react';\n\nexport const PasswordCreation = () => {\n  return (\n    <div>\n      PasswordCreation\n    </div>\n  )\n}\n\nexport default 1","import React from 'react';\nimport './App.css';\nimport Navbar from './components/Navbar/Navbar';\nimport {ButtonCancel, ButtonSelect} from './components/common/Button/Button';\nimport {Route} from 'react-router-dom';\nimport {ProfileContainer} from './components/Profile/ProfileContainer';\nimport {LoginPage} from './components/auth/Login/LoginPage';\nimport {RegisterContainer} from './components/auth/Register/RegisterContainer';\nimport {PasswordRecovery} from './components/auth/PasswordRecovery/PasswordRecovery';\nimport {PasswordCreation} from './components/auth/PasswordCreation/PasswordCreation';\n\nfunction App() {\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<header>\n\t\t\t\t<Navbar/>\n\t\t\t</header>\n\t\t\t<Route path={'/profile/:userId?'}\n\t\t\t       render={() => <ProfileContainer/>}/>\n\t\t\t<Route path={'/login'}\n\t\t\t       render={() => <LoginPage/>}/>\n\t\t\t<Route path={'/register'}\n\t\t\t       render={() => <RegisterContainer/>}/>\n\t\t\t<Route path={'/passwordRecovery'}\n\t\t\t       render={() => <PasswordRecovery/>}/>\n\t\t\t<Route path={'/passwordCreation'}\n\t\t\t       render={() => <PasswordCreation/>}/>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\nimport thunkMiddleware from 'redux-thunk';\nimport {registerReducer} from \"./register-reducer\";\n\n\nconst reducers = combineReducers({\n    register: registerReducer\n});\n\nexport const store = createStore(reducers, applyMiddleware(thunkMiddleware));\n\nexport type AppRootStateType = ReturnType<typeof reducers>\n\n// @ts-ignore\nwindow.store = store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from 'react-redux';\nimport {HashRouter} from 'react-router-dom';\nimport App from './App';\nimport {store} from './redux/redux-store';\n\nReactDOM.render(\n    <React.StrictMode>\n        <HashRouter>\n            <Provider store={store}>\n                <App/>\n            </Provider>\n        </HashRouter>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"Navbar_btn__1C-Ja\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"recoveryPage_form__1X7AH\",\"btn\":\"recoveryPage_btn__2lHJ8\"};"],"sourceRoot":""}