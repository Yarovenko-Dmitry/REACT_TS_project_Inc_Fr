{"version":3,"sources":["a1-main/m1-ui/u1-common/Button/Button.tsx","a1-main/m1-ui/u2-components/Profile/ProfileContainer.tsx","a1-main/m1-ui/u3-Routes/r1-auth/a1-login/LoginPage.tsx","a1-main/m1-ui/u3-Routes/r1-auth/a2-register/RegisterContainer.tsx","a1-main/m1-ui/u3-Routes/r1-auth/a3-passwordRecovery/PasswordRecovery.tsx","a1-main/m1-ui/u3-Routes/r1-auth/a4-passwordCreation/PasswordCreation.tsx","a1-main/m1-ui/u2-components/Navbar/Navbar.tsx","a1-main/m1-ui/App.tsx","serviceWorker.ts","a1-main/m2-bll/redux/redux-store.ts","index.tsx","a1-main/m1-ui/u2-components/Navbar/Navbar.module.css"],"names":["ButtonSelect","ButtonCancel","ProfileContainer","LoginPage","RegisterContainer","PasswordRecovery","PasswordCreation","Navbar","className","s","nav","item","to","activeClassName","activLink","App","path","render","Boolean","window","location","hostname","match","reducers","combineReducers","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"gOAEaA,G,YAAe,WAC1B,OACE,6BACE,6CAKOC,EAAe,WAC1B,OACE,6BACE,4C,OCXOC,EAAmB,WAC9B,OACE,kDCFSC,EAAY,WACvB,OACE,2CCDSC,EAAoB,WAC/B,OACE,mDCHSC,EAAmB,WAC9B,OACE,kDCASC,EAAmB,WAC9B,OACE,kD,uBCqBWC,EAvBA,WACb,OACE,yBAAKC,UAAWC,IAAEC,KAChB,yBAAKF,UAAS,UAAKC,IAAEE,OACnB,kBAAC,IAAD,CAASC,GAAI,WAAYC,gBAAiBJ,IAAEK,WAA5C,YAEF,yBAAKN,UAAWC,IAAEE,MAChB,kBAAC,IAAD,CAASC,GAAI,SAAUC,gBAAiBJ,IAAEK,WAA1C,aAEF,yBAAKN,UAAWC,IAAEE,MAChB,kBAAC,IAAD,CAASC,GAAI,YAAaC,gBAAiBJ,IAAEK,WAA7C,gBAEF,yBAAKN,UAAWC,IAAEE,MAChB,kBAAC,IAAD,CAASC,GAAI,oBAAqBC,gBAAiBJ,IAAEK,WAArD,wBAEF,yBAAKN,UAAWC,IAAEE,MAChB,kBAAC,IAAD,CAASC,GAAI,oBAAqBC,gBAAiBJ,IAAEK,WAArD,0BCgBOC,MAzBf,WACE,OACE,yBAAKP,UAAU,OAAf,cAIE,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MAEA,kBAAC,IAAD,CAAOQ,KAAM,oBACNC,OAAQ,kBAAM,kBAAC,EAAD,SACrB,kBAAC,IAAD,CAAOD,KAAM,SACNC,OAAQ,kBAAM,kBAAC,EAAD,SACrB,kBAAC,IAAD,CAAOD,KAAM,YACNC,OAAQ,kBAAM,kBAAC,EAAD,SACrB,kBAAC,IAAD,CAAOD,KAAM,oBACNC,OAAQ,kBAAM,kBAAC,EAAD,SACrB,kBAAC,IAAD,CAAOD,KAAM,oBACNC,OAAQ,kBAAM,kBAAC,EAAD,WClBPC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,2BCbAC,EAAWC,YAAgB,IAMlBC,EAF6BC,YAAYH,EAAUI,YAAgBC,MCAlFC,IAASZ,OACP,kBAAC,IAAMa,WAAP,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAUL,MAAOA,GACf,kBAAC,EAAD,SAINM,SAASC,eAAe,SF0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,kBGhJ5BC,EAAOC,QAAU,CAAC,IAAM,oBAAoB,KAAO,qBAAqB,UAAY,6B","file":"static/js/main.6dce2b6e.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport const ButtonSelect = () => {\r\n  return (\r\n    <div>\r\n      <button>Select</button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport const ButtonCancel = () => {\r\n  return (\r\n    <div>\r\n      <button>Cancel</button>\r\n    </div>\r\n  )\r\n}","import React from 'react';\r\n\r\nexport const ProfileContainer = () => {\r\n  return (\r\n    <div>\r\n      ProfileContainer\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default 1","import React from 'react';\r\n\r\nexport const LoginPage = () => {\r\n  return (\r\n    <div>\r\n      LoginPage\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default 1","\r\nimport React from 'react';\r\n\r\nexport const RegisterContainer = () => {\r\n  return (\r\n    <div>\r\n      RegisterContainer\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default 1","import React from 'react';\r\n\r\nexport const PasswordRecovery = () => {\r\n  return (\r\n    <div>\r\n      PasswordRecovery\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default 1","\r\n\r\nimport React from 'react';\r\n\r\nexport const PasswordCreation = () => {\r\n  return (\r\n    <div>\r\n      PasswordCreation\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default 1","import React from \"react\";\r\nimport s from './Navbar.module.css'\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconst Navbar = () => {\r\n  return (\r\n    <nav className={s.nav}>\r\n      <div className={`${s.item}`}>\r\n        <NavLink to={'/profile'} activeClassName={s.activLink}>Profile</NavLink>\r\n      </div>\r\n      <div className={s.item}>\r\n        <NavLink to={'/login'} activeClassName={s.activLink}>Login TS</NavLink>\r\n      </div>\r\n      <div className={s.item}>\r\n        <NavLink to={'/register'} activeClassName={s.activLink}>Register TS</NavLink>\r\n      </div>\r\n      <div className={s.item}>\r\n        <NavLink to={'/passwordRecovery'} activeClassName={s.activLink}>PasswordRecovery TS</NavLink>\r\n      </div>\r\n      <div className={s.item}>\r\n        <NavLink to={'/passwordCreation'} activeClassName={s.activLink}>PasswordCreation TS</NavLink>\r\n      </div>\r\n\r\n    </nav>\r\n  )\r\n}\r\n\r\nexport default Navbar;","import React from 'react';\nimport './App.css';\nimport {ButtonCancel, ButtonSelect} from './u1-common/Button/Button';\nimport { Route } from 'react-router-dom';\nimport {ProfileContainer} from './u2-components/Profile/ProfileContainer';\nimport {LoginPage} from './u3-Routes/r1-auth/a1-login/LoginPage';\nimport {RegisterContainer} from './u3-Routes/r1-auth/a2-register/RegisterContainer';\nimport {PasswordRecovery} from './u3-Routes/r1-auth/a3-passwordRecovery/PasswordRecovery';\nimport {PasswordCreation} from './u3-Routes/r1-auth/a4-passwordCreation/PasswordCreation';\nimport Navbar from './u2-components/Navbar/Navbar';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n     hello world\n      {/*<c1-Header/>*/}\n      {/*<Main/>*/}\n      <Navbar/>\n      <ButtonSelect/>\n      <ButtonCancel/>\n\n      <Route path={'/profile/:userId?'}\n             render={() => <ProfileContainer/>}/>\n      <Route path={'/login'}\n             render={() => <LoginPage/>}/>\n      <Route path={'/register'}\n             render={() => <RegisterContainer/>}/>\n      <Route path={'/passwordRecovery'}\n             render={() => <PasswordRecovery/>}/>\n      <Route path={'/passwordCreation'}\n             render={() => <PasswordCreation/>}/>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\n\r\nimport thunkMiddleware from 'redux-thunk';\r\n\r\n\r\nconst reducers = combineReducers({\r\n\r\n});\r\n\r\nlet store: ReturnType<typeof createStore> = createStore(reducers, applyMiddleware(thunkMiddleware));\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './a1-main/m1-ui/App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from 'react-redux';\nimport store from \"./a1-main/m2-bll/redux/redux-store\";\nimport {HashRouter} from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <HashRouter>\n      <Provider store={store}>\n        <App/>\n      </Provider>\n    </HashRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__1Ar2A\",\"item\":\"Navbar_item__14Q9L\",\"activLink\":\"Navbar_activLink__b_OHD\"};"],"sourceRoot":""}