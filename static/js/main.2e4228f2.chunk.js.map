{"version":3,"sources":["serviceWorker.ts","components/Navbar/Navbar.tsx","components/Profile/ProfileContainer.tsx","components/common/Button/Button.tsx","components/auth/Login/LoginPage.tsx","api/api.ts","redux/register-reducer.ts","components/auth/Register/RegisterContainer.tsx","components/auth/PasswordRecovery/PasswordRecovery.tsx","components/auth/PasswordCreation/PasswordCreation.tsx","App.tsx","redux/redux-store.ts","index.tsx","components/Navbar/Navbar.module.css","components/auth/PasswordRecovery/recoveryPage.module.css"],"names":["Boolean","window","location","hostname","match","Navbar","to","className","s","btn","activeClassName","activLink","ProfileContainer","ButtonSelect","LoginPage","instance","axios","create","withCredentials","baseURL","headers","authAPI","data","post","internalState","isRegistered","RegisterContainer","dispatch","useDispatch","useSelector","state","register","formik","useFormik","validate","values","initialValues","email","password","onSubmit","a","resultCode","type","value","Grid","container","justify","item","xs","handleSubmit","FormControl","FormLabel","FormGroup","TextField","label","margin","getFieldProps","Button","variant","color","PasswordRecovery","style","wrapper","form","required","placeholder","PasswordCreation","App","path","render","reducers","combineReducers","action","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"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","file":"static/js/main.2e4228f2.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport s from './Navbar.module.css';\r\nimport {NavLink} from 'react-router-dom';\r\n\r\nconst Navbar = () => {\r\n\treturn (\r\n\t\t<nav>\r\n\t\t\t<NavLink to={'/profile'} className={s.btn} activeClassName={s.activLink}>\r\n\t\t\t\tprofile\r\n\t\t\t</NavLink>\r\n\t\t\t<NavLink to={'/login'} className={s.btn} activeClassName={s.activLink}>\r\n\t\t\t\tlogin\r\n\t\t\t</NavLink>\r\n\t\t\t<NavLink to={'/register'} className={s.btn} activeClassName={s.activLink}>\r\n\t\t\t\tregistration\r\n\t\t\t</NavLink>\r\n\t\t\t<NavLink to={'/passwordRecovery'} className={s.btn} activeClassName={s.activLink}>\r\n\t\t\t\trecovery\r\n\t\t\t</NavLink>\r\n\t\t\t<NavLink to={'/passwordCreation'} className={s.btn} activeClassName={s.activLink}>\r\n\t\t\t\tcreate a new pw\r\n\t\t\t</NavLink>\r\n\t\t</nav>\r\n\t);\r\n};\r\nexport default Navbar;\r\n\r\n","import React from 'react';\r\n\r\nexport const ProfileContainer = () => {\r\n  return (\r\n    <div>\r\n      ProfileContainer\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default 1","import React from 'react';\r\n\r\nexport const ButtonSelect = () => {\r\n  return (\r\n    <div>\r\n      <button>Select</button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport const ButtonCancel = () => {\r\n  return (\r\n    <div>\r\n      <button>Cancel</button>\r\n    </div>\r\n  )\r\n}","import React from 'react';\r\nimport {ButtonSelect} from '../../common/Button/Button';\r\n\r\n\r\nexport const LoginPage = () => {\r\n  return (\r\n    <div>\r\n      LoginPage\r\n      <ButtonSelect/>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default 1","import axios from 'axios';\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'https://neko-back.herokuapp.com/2.0/',\r\n    headers: {\r\n        'API-KEY': '7670157b-55fb-46c4-91b5-ea5772613da8'\r\n    }\r\n});\r\n\r\n\r\nexport const usersAPI = {\r\n    getUsers(currentPage: number = 1, pageSize: number = 10) {\r\n        return instance.get(`users?page=${currentPage}&count=${pageSize}`\r\n        )\r\n            .then(response => response.data);\r\n    },\r\n\r\n    follow(userId: string) {\r\n        return instance.post(`follow/${userId}`)\r\n\r\n    },\r\n    unFollow(userId: string) {\r\n        return instance.delete(`follow/${userId}`)\r\n    },\r\n    getProfile(userId: string) {\r\n        console.warn('Obsolute method. Please use profileAPI object')\r\n        return profileAPI.getProfile(userId);\r\n    }\r\n}\r\n\r\nexport const profileAPI = {\r\n    getProfile(userId: string) {\r\n        return instance.get(`profile/` + userId);\r\n    },\r\n    getStatus(userId: string) {\r\n        return instance.get(`profile/status/` + userId);\r\n    },\r\n    updateStatus(status: string) {\r\n        return instance.put(`profile/status`, {status: status});\r\n    }\r\n}\r\n\r\nexport const authAPI = {\r\n    me() {\r\n        return instance.get(`auth/me`)\r\n    },\r\n    login(email: string, password: string, rememberMe = false) {\r\n        return instance.post(`auth/login`, {email, password, rememberMe});\r\n    },\r\n    logout() {\r\n        return instance.delete(`auth/login`);\r\n    },\r\n    register(data: RegisterDataType) {\r\n        debugger\r\n        return instance.post(`auth/register`, data);\r\n    }\r\n}\r\n\r\ntype RegisterDataType = {\r\n    email: string,\r\n    password: string\r\n}","import {Dispatch} from \"redux\";\r\nimport {authAPI} from \"../api/api\";\r\n\r\n\r\nlet internalState: RegisterReducerType = {\r\n    isRegistered: false\r\n};\r\n\r\nexport const registerReducer = (state: RegisterReducerType = internalState, action: ActionsType) => {\r\n\r\n    switch (action.type) {\r\n        case \"register/SET-IS-REGISTERED\":\r\n            return {...state, isRegistered: action.value}\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst setRegisterAC = (value: boolean) => ({\r\n    type: 'register/SET-IS-REGISTERED', value\r\n})\r\n\r\nexport const RegisterTC = (data: RegisterParamsType) => async (dispatch: Dispatch<ActionsType>) => {\r\n    debugger\r\n    let response = await authAPI.register(data)\r\n\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(setRegisterAC(true))\r\n    }\r\n}\r\n//types\r\ntype RegisterReducerType = {\r\n    isRegistered: boolean\r\n};\r\ntype ActionsType = ReturnType<typeof setRegisterAC>\r\ntype ThunkDispatch = Dispatch<ActionsType>\r\n\r\ntype RegisterParamsType = {\r\n    email: string\r\n    password: string\r\n}","import React from 'react';\r\nimport {useFormik} from \"formik\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {Button, FormControl, FormGroup, FormLabel, Grid, TextField} from \"@material-ui/core\";\r\nimport {Redirect} from 'react-router-dom';\r\nimport {RegisterTC} from \"../../../redux/register-reducer\";\r\nimport {AppRootStateType} from \"../../../redux/redux-store\";\r\n\r\nexport const RegisterContainer = () => {\r\n    const dispatch = useDispatch()\r\n    const isRegistered = useSelector<AppRootStateType, boolean>(state => state.register.isRegistered)\r\n    const formik = useFormik({\r\n        validate: (values: any) => {\r\n\r\n        },\r\n        initialValues: {\r\n            email: '',\r\n            password: ''\r\n        },\r\n        onSubmit: values => {\r\n            debugger\r\n            dispatch(RegisterTC(values))\r\n        }\r\n    })\r\n\r\n    if (isRegistered) {\r\n        return <Redirect to={'/login'}/>\r\n    }\r\n\r\n    return (\r\n        <Grid container justify=\"center\">\r\n            <Grid item xs={4}>\r\n                <form onSubmit={formik.handleSubmit}>\r\n                    <FormControl>\r\n                        <FormLabel>\r\n                            <p>\r\n                                Registration\r\n                            </p>\r\n                        </FormLabel>\r\n                        <FormGroup>\r\n                            <TextField\r\n                                label=\"Email\"\r\n                                margin=\"normal\"\r\n                                {...formik.getFieldProps('email')}\r\n                            />\r\n                            <TextField\r\n                                type=\"password\"\r\n                                label=\"Password\"\r\n                                margin=\"normal\"\r\n                                {...formik.getFieldProps('password')}\r\n                            />\r\n                            <Button type={'submit'} variant={'contained'} color={'primary'}>Register</Button>\r\n                        </FormGroup>\r\n                    </FormControl>\r\n                </form>\r\n            </Grid>\r\n        </Grid>\r\n    )\r\n}\r\n\r\n","import React from 'react';\r\nimport style from './recoveryPage.module.css';\r\n\r\nexport const PasswordRecovery = () => {\r\n\treturn (\r\n\t\t<section>\r\n\t\t\t<div className={style.container}>\r\n\t\t\t\t<div className={style.wrapper}>\r\n\t\t\t\t\t<div className={style.form}>\r\n\t\t\t\t\t\t<h1>Forgot password?</h1>\r\n\t\t\t\t\t\t<form>\r\n\t\t\t\t\t\t\t<input type=\"email\" required placeholder=\"Enter your email\"/>\r\n\t\t\t\t\t\t\t<button className={style.btn}>Send</button>\r\n\t\t\t\t\t\t</form>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</section>\r\n\t);\r\n};\r\n\r\n","\r\n\r\nimport React from 'react';\r\n\r\nexport const PasswordCreation = () => {\r\n  return (\r\n    <div>\r\n      PasswordCreation\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default 1","import React from 'react';\r\nimport './App.css';\r\nimport Navbar from './components/Navbar/Navbar';\r\nimport {ButtonCancel, ButtonSelect} from './components/common/Button/Button';\r\nimport {Route} from 'react-router-dom';\r\nimport {ProfileContainer} from './components/Profile/ProfileContainer';\r\nimport {LoginPage} from './components/auth/Login/LoginPage';\r\nimport {RegisterContainer} from './components/auth/Register/RegisterContainer';\r\nimport {PasswordRecovery} from './components/auth/PasswordRecovery/PasswordRecovery';\r\nimport {PasswordCreation} from './components/auth/PasswordCreation/PasswordCreation';\r\n\r\nfunction App() {\r\n\treturn (\r\n\t\t<div className=\"App\">\r\n\t\t\t<header>\r\n\t\t\t\t<Navbar/>\r\n\t\t\t</header>\r\n\t\t\t<Route path={'/profile/:userId?'}\r\n\t\t\t       render={() => <ProfileContainer/>}/>\r\n\t\t\t<Route path={'/login'}\r\n\t\t\t       render={() => <LoginPage/>}/>\r\n\t\t\t<Route path={'/register'}\r\n\t\t\t       render={() => <RegisterContainer/>}/>\r\n\t\t\t<Route path={'/passwordRecovery'}\r\n\t\t\t       render={() => <PasswordRecovery/>}/>\r\n\t\t\t<Route path={'/passwordCreation'}\r\n\t\t\t       render={() => <PasswordCreation/>}/>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default App;\r\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport {registerReducer} from \"./register-reducer\";\r\n\r\n\r\nconst reducers = combineReducers({\r\n    register: registerReducer\r\n});\r\n\r\nexport const store = createStore(reducers, applyMiddleware(thunkMiddleware));\r\n\r\nexport type AppRootStateType = ReturnType<typeof reducers>\r\n\r\n// @ts-ignore\r\nwindow.store = store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from 'react-redux';\r\nimport {HashRouter} from 'react-router-dom';\r\nimport App from './App';\r\nimport {store} from './redux/redux-store';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <HashRouter>\r\n            <Provider store={store}>\r\n                <App/>\r\n            </Provider>\r\n        </HashRouter>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"Navbar_btn__2LLvD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"recoveryPage_form__90bKw\",\"btn\":\"recoveryPage_btn__3mJme\"};"],"sourceRoot":""}